"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateUML = exports.escapeHtml = exports.isListItemToken = exports.isParagraphToken = exports.isInlineToken = exports.getParentTokenIndex = exports.setTokenAttr = exports.UNESCAPE_RE = void 0;
exports.UNESCAPE_RE = /\\([ \\!"#$%&'()*+,./:;<=>?@[\]^_`{|}~-])/gu;
const setTokenAttr = (token, name, value) => {
    const index = token.attrIndex(name);
    const attr = [name, value];
    if (index < 0)
        token.attrPush(attr);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    else
        token.attrs[index] = attr;
};
exports.setTokenAttr = setTokenAttr;
const getParentTokenIndex = (tokens, index) => {
    const targetLevel = tokens[index].level - 1;
    for (let i = index - 1; i >= 0; i--)
        if (tokens[i].level === targetLevel)
            return i;
    return -1;
};
exports.getParentTokenIndex = getParentTokenIndex;
const isInlineToken = (token) => token.type === "inline";
exports.isInlineToken = isInlineToken;
const isParagraphToken = (token) => token.type === "paragraph_open";
exports.isParagraphToken = isParagraphToken;
const isListItemToken = (token) => token.type === "list_item_open";
exports.isListItemToken = isListItemToken;
const escapeHtml = (unsafeHTML) => unsafeHTML
    .replace(/&/gu, "&amp;")
    .replace(/</gu, "&lt;")
    .replace(/>/gu, "&gt;")
    .replace(/"/gu, "&quot;")
    .replace(/'/gu, "&#039;");
exports.escapeHtml = escapeHtml;
const generateUML = (options) => {
    const OPEN_MARKER = `@${options.open}`;
    const CLOSE_MARKER = `@${options.close}`;
    return (state, startLine, endLine, silent) => {
        let nextLine;
        let i;
        let autoClosed = false;
        let start = state.bMarks[startLine] + state.tShift[startLine];
        let max = state.eMarks[startLine];
        /*
         * Check out the first character quickly,
         * this should filter out most of non-uml blocks
         */
        if (state.src.charAt(start) !== "@")
            return false;
        // Check out the rest of the marker string
        for (i = 0; i < OPEN_MARKER.length; ++i)
            if (OPEN_MARKER[i] !== state.src[start + i])
                return false;
        const markup = state.src.slice(start, start + i);
        const params = state.src.slice(start + i, max);
        // Since start is found, we can report success here in validation mode
        if (silent)
            return true;
        // Search for the end of the block
        for (nextLine = startLine;; nextLine += 1) {
            if (nextLine >= endLine)
                /*
                 * unclosed block should be autoclosed by end of document.
                 * also block seems to be autoclosed by end of parent
                 */
                break;
            start = state.bMarks[nextLine] + state.tShift[nextLine];
            max = state.eMarks[nextLine];
            if (start < max && state.sCount[nextLine] < state.blkIndent)
                /*
                 * non-empty line with negative indent should stop the list:
                 * - ```
                 *  test
                 */
                break;
            if (
            // didnâ€™t find the closing fence
            state.src.charAt(start) === "@" &&
                // closing fence should not be indented with respect of opening fence
                state.sCount[nextLine] <= state.sCount[startLine]) {
                let closeMarkerMatched = true;
                for (i = 0; i < CLOSE_MARKER.length; ++i)
                    if (CLOSE_MARKER[i] !== state.src[start + i]) {
                        closeMarkerMatched = false;
                        break;
                    }
                if (closeMarkerMatched &&
                    // make sure tail has spaces only
                    state.skipSpaces(start + i) >= max) {
                    // found!
                    autoClosed = true;
                    break;
                }
            }
        }
        const contents = state.src
            .split("\n")
            .slice(startLine + 1, nextLine)
            .join("\n");
        const token = state.push(options.name, "fence", 0);
        token.block = true;
        token.info = params;
        token.content = contents;
        token.map = [startLine, nextLine];
        token.markup = markup;
        state.line = nextLine + (autoClosed ? 1 : 0);
        return true;
    };
};
exports.generateUML = generateUML;
//# sourceMappingURL=utils.js.map