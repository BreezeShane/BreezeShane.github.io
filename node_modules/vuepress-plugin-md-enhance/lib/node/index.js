"use strict";
const path_1 = require("path");
const lineNumbers = require("@vuepress/markdown/lib/lineNumbers");
const code_demo_1 = require("./markdown-it/code-demo");
const decode_url_1 = require("./markdown-it/decode-url");
const flowchart_1 = require("./markdown-it/flowchart");
const footnote_1 = require("./markdown-it/footnote");
const katex_1 = require("./markdown-it/katex");
const mark_1 = require("./markdown-it/mark");
const mermaid_1 = require("./markdown-it/mermaid");
const presentation_1 = require("./markdown-it/presentation");
const sub_1 = require("./markdown-it/sub");
const sup_1 = require("./markdown-it/sup");
const tasklist_1 = require("./markdown-it/tasklist");
const pluginConfig_1 = require("./pluginConfig");
const mdEnhancePlugin = (option, context) => {
    const { themeConfig } = context;
    const markdownOption = Object.keys(option).length === 0 ? themeConfig.mdEnhance || {} : option;
    const alignEnable = markdownOption.enableAll || markdownOption.align || false;
    const demoEnable = markdownOption.enableAll || markdownOption.demo || false;
    const flowchartEnable = markdownOption.enableAll || markdownOption.flowchart || false;
    const footnoteEnable = markdownOption.enableAll || markdownOption.footnote || false;
    const tasklistEnable = markdownOption.enableAll || markdownOption.tasklist || false;
    const mermaidEnable = markdownOption.enableAll || Boolean(markdownOption.mermaid) || false;
    const presentationEnable = markdownOption.enableAll || Boolean(markdownOption.presentation) || false;
    const texEnable = markdownOption.enableAll || Boolean(markdownOption.tex) || false;
    const revealPlugins = typeof markdownOption.presentation === "object" &&
        Array.isArray(markdownOption.presentation.plugins)
        ? markdownOption.presentation.plugins
        : [];
    return Object.assign(Object.assign({ name: "md-enhance", alias: {
            "@FlowChart": flowchartEnable
                ? path_1.resolve(__dirname, "../client/FlowChart.vue")
                : "@mr-hope/vuepress-shared/lib/esm/noopModule",
            "@Mermaid": mermaidEnable
                ? path_1.resolve(__dirname, "../client/Mermaid.js")
                : "@mr-hope/vuepress-shared/lib/esm/noopModule",
            "@Presentation": presentationEnable
                ? path_1.resolve(__dirname, "../client/Presentation.vue")
                : "@mr-hope/vuepress-shared/lib/esm/noopModule",
        }, define: () => ({
            MARKDOWN_ENHANCE_ALIGN: alignEnable,
            MARKDOWN_ENHANCE_FLOWCHART: flowchartEnable,
            MARKDOWN_ENHANCE_FOOTNOTE: footnoteEnable,
            MARKDOWN_ENHANCE_MERMAID: mermaidEnable,
            MARKDOWN_ENHANCE_PRESENTATION: presentationEnable,
            MARKDOWN_ENHANCE_TASKLIST: tasklistEnable,
            MARKDOWN_ENHANCE_TEX: texEnable,
            CODE_DEMO_OPTIONS: Object.assign(Object.assign({}, code_demo_1.codeDemoDefaultSetting), (typeof markdownOption.demo === "boolean"
                ? {}
                : markdownOption.demo)),
            MERMAID_OPTIONS: typeof markdownOption.mermaid === "object"
                ? markdownOption.mermaid
                : {},
            REVEAL_CONFIG: typeof markdownOption.presentation === "object" &&
                typeof markdownOption.presentation.revealConfig === "object"
                ? markdownOption.presentation.revealConfig
                : {},
            REVEAL_PLUGIN_HIGHLIGHT: revealPlugins.includes("highlight"),
            REVEAL_PLUGIN_MATH: revealPlugins.includes("math"),
            REVEAL_PLUGIN_NOTES: revealPlugins.includes("notes"),
            REVEAL_PLUGIN_SEARCH: revealPlugins.includes("search"),
            REVEAL_PLUGIN_ZOOM: revealPlugins.includes("zoom"),
        }), enhanceAppFiles: path_1.resolve(__dirname, "../client/enhanceAppFile.js") }, (demoEnable
        ? {
            clientRootMixin: path_1.resolve(__dirname, "../client/clientRootMixin.js"),
        }
        : {})), { chainMarkdown: (md) => {
            if (markdownOption.imageFix !== false)
                md.plugin("decode-url").use(decode_url_1.default);
            if (markdownOption.lineNumbers !== false)
                md.plugin("line-numbers").use(lineNumbers);
            if (markdownOption.sup || markdownOption.enableAll)
                md.plugin("sup").use(sup_1.default);
            if (markdownOption.sub || markdownOption.enableAll)
                md.plugin("sub").use(sub_1.default);
            if (footnoteEnable)
                md.plugin("footnote").use(footnote_1.default);
            if (flowchartEnable)
                md.plugin("flowchart").use(flowchart_1.default);
            if (markdownOption.mark || markdownOption.enableAll)
                md.plugin("mark").use(mark_1.default);
            if (tasklistEnable)
                md.plugin("tasklist").use(tasklist_1.default, [
                    typeof markdownOption.tasklist === "object"
                        ? markdownOption.tasklist
                        : {},
                ]);
            if (mermaidEnable)
                md.plugin("mermaid").use(mermaid_1.default);
            if (texEnable)
                md.plugin("katex").use(katex_1.default, [
                    Object.assign({ macros: {
                            // support more symbols
                            "\\liiiint": "\\int\\!\\!\\!\\iiint",
                            "\\iiiint": "\\int\\!\\!\\!\\!\\iiint",
                            "\\idotsint": "\\int\\!\\cdots\\!\\int",
                        } }, (typeof markdownOption.tex === "object"
                        ? markdownOption.tex
                        : {})),
                ]);
            if (presentationEnable)
                md.plugin("presentation").use(presentation_1.default);
        }, plugins: pluginConfig_1.pluginConfig(markdownOption, context) });
};
module.exports = mdEnhancePlugin;
//# sourceMappingURL=index.js.map