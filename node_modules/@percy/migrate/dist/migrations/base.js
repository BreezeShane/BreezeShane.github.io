"use strict";

var _semver = _interopRequireDefault(require("semver"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SDKMigration {
  // default SDK language
  // returns true for the same language and matching name/alias
  static matches(name, lang) {
    var _this$aliases;

    return (!lang || this.language === lang) && (this.name === name || ((_this$aliases = this.aliases) === null || _this$aliases === void 0 ? void 0 : _this$aliases.includes(name)));
  } // returns a formated string matching "{name} ({aliases})"


  static get aliased() {
    var _this$aliases2;

    return `${this.name}${!((_this$aliases2 = this.aliases) !== null && _this$aliases2 !== void 0 && _this$aliases2.length) ? '' : ` (${this.aliases.join(', ')})`}`;
  } // initialized with the installed SDK info


  constructor(installed) {
    this.installed = installed;
    this.transforms = [];
  }

  get language() {
    return this.constructor.language;
  }

  get name() {
    return this.constructor.name;
  }

  get aliases() {
    return this.constructor.aliases;
  }

  get aliased() {
    return this.constructor.aliased;
  }

  get version() {
    return this.constructor.version;
  } // returns true if the SDK is not installed or if the installed SDK has
  // a different name or version subset


  get needsUpgrade() {
    return !(this.installed && this.installed.name === this.name && _semver.default.subset(this.installed.version, this.version));
  }

}

_defineProperty(SDKMigration, "language", 'js');

module.exports = SDKMigration;