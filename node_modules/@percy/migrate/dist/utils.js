"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.run = run;
exports.npm = void 0;

var _fs = require("fs");

var _logger = _interopRequireDefault(require("@percy/logger"));

var _crossSpawn = _interopRequireDefault(require("cross-spawn"));

var _which = _interopRequireDefault(require("which"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Run a command with the specified args
async function run(command, args) {
  // adjust stdio based on the loglevel
  let stdio = ['inherit', 'inherit', 'inherit'];

  if (_logger.default.loglevel() === 'silent') {
    stdio = ['ignore', 'ignore', 'ignore'];
  } else if (_logger.default.loglevel() === 'warn') {
    stdio = ['ignore', 'ignore', 'inherit'];
  } // run the command synchronously


  args = args.filter(Boolean);
  (0, _logger.default)('migrate:run').debug(`Running "${command} ${args.join(' ')}"`);

  let {
    status,
    error
  } = _crossSpawn.default.sync(_which.default.sync(command), args, {
    stdio
  }); // handle errors


  if (!error && status) {
    error = Object.assign(new Error(), {
      message: `${command} failed with exit code ${status}`,
      status
    });
  }

  if (error) {
    throw error;
  }
} // Common commands to manage node packages


const npm = {
  // Determine package manager based on lockfile
  get manager() {
    let hasYarnLock = (0, _fs.existsSync)(`${process.cwd()}/yarn.lock`);
    let hasNpmLock = (0, _fs.existsSync)(`${process.cwd()}/package-lock.json`);

    if (hasYarnLock && hasNpmLock) {
      (0, _logger.default)('migrate:npm').warn('Found both a yarn.lock and package-lock.json, defaulting to npm');
    } // cache the result so the above check and warning only happen once


    let result = hasYarnLock && !hasNpmLock && 'yarn' || 'npm';
    Object.defineProperty(npm, 'manager', {
      get: () => result
    });
    return result;
  },

  // Install packages with npm or yarn to dev dependencies by default
  install(specs, {
    dev = true
  } = {}) {
    return run(npm.manager, {
      npm: ['install', dev && '--save-dev'].concat(specs),
      yarn: ['add', dev && '--dev'].concat(specs)
    }[npm.manager]);
  },

  // Uninstall packages with npm or yarn
  uninstall(specs) {
    return run(npm.manager, {
      npm: ['uninstall'].concat(specs),
      yarn: ['remove'].concat(specs)
    }[npm.manager]);
  }

};
exports.npm = npm;