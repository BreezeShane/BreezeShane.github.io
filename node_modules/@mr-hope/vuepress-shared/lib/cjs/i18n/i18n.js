"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultLocale = exports.getLocale = exports.path2Lang = exports.lang2Path = exports.getRootLangPath = exports.getRootLang = exports.checkLang = exports.showLangError = void 0;
const config_1 = require("./config");
const reportStatus = {};
const showLangError = (lang) => {
    if (!reportStatus[lang]) {
        console.warn(`${lang} locates config is missing, and will return 'en-US' instead.
You can contribute to https://github.com/vuepress-theme-hope/vuepress-theme-hope/blob/v1/packages/shared/src/i18n/config.ts and other 'i18n.ts' in this repository.
Note: This warning will be shown only once.`);
        reportStatus[lang] = true;
    }
};
exports.showLangError = showLangError;
/** Check if the lang is supported */
const checkLang = (lang) => {
    const result = config_1.langs.includes(lang);
    return result;
};
exports.checkLang = checkLang;
/** Get language of root directory */
const getRootLang = (context) => {
    var _a, _b;
    // infer from siteLocale
    const siteLocales = context.siteConfig.locales;
    if ((siteLocales === null || siteLocales === void 0 ? void 0 : siteLocales["/"]) && exports.checkLang((_a = siteLocales["/"]) === null || _a === void 0 ? void 0 : _a.lang))
        return siteLocales["/"].lang;
    // infer from themeLocale
    const themeLocales = context.themeConfig.locales;
    if ((themeLocales === null || themeLocales === void 0 ? void 0 : themeLocales["/"]) && exports.checkLang((_b = themeLocales["/"]) === null || _b === void 0 ? void 0 : _b.lang))
        return themeLocales["/"].lang;
    exports.showLangError("root");
    return "en-US";
};
exports.getRootLang = getRootLang;
/** Get the infer language path from root directory language */
const getRootLangPath = (context) => config_1.lang2PathConfig[exports.getRootLang(context)];
exports.getRootLangPath = getRootLangPath;
/** Get path from language */
const lang2Path = (lang = "") => {
    if (lang in config_1.lang2PathConfig)
        return config_1.lang2PathConfig[lang];
    console.error(`${lang} has no path config, and will return '/' instead.`);
    return "/";
};
exports.lang2Path = lang2Path;
/** Get language from path */
const path2Lang = (path = "") => {
    if (path in config_1.path2langConfig)
        return config_1.path2langConfig[path];
    console.error(`${path} isnâ€™t assign with a lang, and will return 'en-US' instead.`);
    return "en-US";
};
exports.path2Lang = path2Lang;
/** Get locate of certain language */
const getLocale = (lang) => {
    if (lang in config_1.localesConfig)
        return config_1.localesConfig[lang];
    exports.showLangError(lang);
    return config_1.localesConfig["en-US"];
};
exports.getLocale = getLocale;
/** Get Default ThemeLocale */
const getDefaultLocale = () => config_1.localesConfig["en-US"];
exports.getDefaultLocale = getDefaultLocale;
//# sourceMappingURL=i18n.js.map