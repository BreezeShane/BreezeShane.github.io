"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generator = exports.encodeXML = exports.encodeCDATA = exports.getImageMineType = exports.resolveUrl = exports.isAbsoluteUrl = exports.isUrl = exports.resolveHTML = exports.success = exports.error = exports.warn = exports.wait = void 0;
const chalk_1 = require("chalk");
const wait = (message) => console.log(chalk_1.blue("Feed:"), chalk_1.black.bgYellowBright("wait"), message);
exports.wait = wait;
const warn = (message) => console.log(chalk_1.blue("Feed:"), chalk_1.black.bgYellow("warn"), message);
exports.warn = warn;
const error = (message) => console.log(chalk_1.blue("Feed:"), chalk_1.black.bgRed("Error"), message);
exports.error = error;
const success = (message) => console.log(chalk_1.blue("Feed:"), chalk_1.black.bgGreen("Success"), message);
exports.success = success;
const resolveHTML = (html) => html
    // remove html class
    .replace(/ class=".*?"/gu, "")
    // remove v-pre
    .replace(/ v-pre/gu, "")
    // remove anchor
    .replace(/<a href="#.*?">.*?<\/a>/gu, "")
    // remove html comment
    .replace(/<!--.*?-->/gu, "")
    // remove OutboundLink
    .replace(/<OutboundLink ?\/>/gu, "")
    // resolve RouterLink
    .replace(/<RouterLink to="(.*?)">(.*?)<\/RouterLink>/gu, '<a href="$1">$2</a>')
    // remove self-closed tags
    .replace(/<(?:a|div|span)[^>]*?\/>/gu, "")
    // remove other related tags
    .replace(/<(Badge|FlowChart|Presentation).*?(?:>.*?<\/\1>|\/>)/gu, "<i>Not supported content</i>")
    // remove tex
    .replace(/<math[\s\S]*?\/math>/gu, "<i>Not supported content</i>");
exports.resolveHTML = resolveHTML;
/**
 * check if string is a valid url
 */
const isUrl = (test) => {
    if (typeof test !== "string" || test === "")
        return false;
    // url Math
    const result = /^(?:\w+:)?\/\/(\S+)$/u.exec(test);
    if (!result)
        return false;
    const address = result[1];
    if (!address)
        return false;
    return (
    // address with localhost
    /^localhost[:?\d]*(?:[^:?\d]\S*)?$/u.test(address) ||
        // address without localhost
        /^[^\s.]+\.\S{2,}$/u.test(address));
};
exports.isUrl = isUrl;
const isAbsoluteUrl = (test) => test.startsWith("/");
exports.isAbsoluteUrl = isAbsoluteUrl;
const resolveUrl = (hostname, base = "", path = "") => `${hostname}${
// make sure base starts and ends with '/'
base.replace(/^\/?/u, "/").replace(/\/?$/u, "/")}${
// make sure path does not start with '/'
path.replace(/^\//u, "")}`;
exports.resolveUrl = resolveUrl;
const getImageMineType = (ext = "") => `image/${ext === "jpg"
    ? "jpeg"
    : ext === "svg"
        ? "svg+xml"
        : ext === "jpeg" ||
            ext === "png" ||
            ext === "bmp" ||
            ext === "gif" ||
            ext === "webp"
            ? ext
            : ""}`;
exports.getImageMineType = getImageMineType;
/**
 * @see https://stackoverflow.com/questions/223652/is-there-a-way-to-escape-a-cdata-end-token-in-xml
 */
const encodeCDATA = (content) => content.replace(/]]>/g, "]]]]><![CDATA[>");
exports.encodeCDATA = encodeCDATA;
const encodeXML = (content) => content
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;");
exports.encodeXML = encodeXML;
exports.generator = "@mr-hope/vuepress-plugin-feed";
//# sourceMappingURL=utils.js.map