"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFeedLinks = exports.getFeedChannelOption = exports.getOutput = exports.checkOptions = void 0;
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const utils_1 = require("./utils");
const checkOptions = (options, context) => {
    const hostname = options.hostname || context.themeConfig.hostname;
    // make sure hostname do not end with `/`
    if (hostname)
        options.hostname = hostname.replace(/\/?$/u, "");
    else {
        utils_1.error("Option 'hostname' is required!");
        return false;
    }
    options.rootLang = vuepress_shared_1.getRootLang(context);
    return true;
};
exports.checkOptions = checkOptions;
const getOutput = (output) => {
    const defaultOption = {
        atom: {
            enable: true,
            path: "atom.xml",
        },
        json: {
            enable: true,
            path: "feed.json",
        },
        rss: {
            enable: true,
            path: "rss.xml",
        },
    };
    return vuepress_shared_1.deepAssign(defaultOption, output || {});
};
exports.getOutput = getOutput;
const getFeedChannelOption = (options, context) => {
    var _a, _b, _c;
    const { rootLang, hostname, icon, image } = options;
    const { base, themeConfig } = context;
    const { title, description } = context.getSiteData();
    const author = ((_b = (_a = options.channel) === null || _a === void 0 ? void 0 : _a.author) === null || _b === void 0 ? void 0 : _b.name) || themeConfig.author;
    const copyright = ((_c = themeConfig.footer) === null || _c === void 0 ? void 0 : _c.copyright) || (author ? `Copyright by ${author}` : "");
    const defaultChannelOpion = Object.assign(Object.assign(Object.assign({ title, link: utils_1.resolveUrl(hostname, base), description, language: rootLang, copyright, pubDate: new Date(), lastUpdated: new Date() }, (icon ? { icon } : {})), (image ? { image } : {})), (author ? { author: { name: author } } : {}));
    return vuepress_shared_1.deepAssign(defaultChannelOpion, options.channel || {});
};
exports.getFeedChannelOption = getFeedChannelOption;
const getFeedLinks = (options, output, context) => {
    const { base } = context;
    const { hostname } = options;
    return {
        atom: utils_1.resolveUrl(hostname, base, output.atom.path),
        json: utils_1.resolveUrl(hostname, base, output.json.path),
        rss: utils_1.resolveUrl(hostname, base, output.rss.path),
    };
};
exports.getFeedLinks = getFeedLinks;
//# sourceMappingURL=options.js.map