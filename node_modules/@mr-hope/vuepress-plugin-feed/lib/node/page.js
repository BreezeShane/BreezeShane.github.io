"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedPage = void 0;
const utils_1 = require("./utils");
class FeedPage {
    constructor($page, feed, options, context) {
        this.$page = $page;
        this.feed = feed;
        this.options = options;
        this.context = context;
        this.frontmatter = $page.frontmatter;
        this.feedOption = this.frontmatter.feed || {};
    }
    /** Get current page */
    get page() {
        return this.context.pages.find((page) => page.key === this.$page.key);
    }
    get title() {
        return this.feedOption.title || this.$page.title;
    }
    /** real url */
    get link() {
        return utils_1.resolveUrl(this.options.hostname, this.context.base, this.$page.path);
    }
    get description() {
        if (this.feedOption.description)
            return this.feedOption.description;
        if (this.frontmatter.description)
            return this.frontmatter.description;
        if (this.$page.excerpt)
            return utils_1.resolveHTML(this.context.markdown.render(this.$page.excerpt).html);
        return undefined;
    }
    get author() {
        if (Array.isArray(this.feedOption.author))
            return this.feedOption.author;
        if (typeof this.feedOption.author === "object")
            return [this.feedOption.author];
        const { author } = this.$page.frontmatter;
        const { author: globalAuthor } = this.context.themeConfig;
        return [{ name: author === false ? "" : author || globalAuthor || "" }];
    }
    get category() {
        if (Array.isArray(this.feedOption.category))
            return this.feedOption.category;
        if (typeof this.feedOption.category === "object")
            return [this.feedOption.category];
        const { category } = this.frontmatter;
        return category ? [{ name: category }] : [];
    }
    get enclosure() {
        if (this.image)
            return {
                url: this.image,
                type: utils_1.getImageMineType(this.image.split(".").pop() || ""),
            };
        return undefined;
    }
    get guid() {
        return this.feedOption.guid || this.page._permalink || this.link;
    }
    get pubDate() {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const { date, time = date } = this.$page.frontmatter;
        const createTimeStamp = this.$page.createTimeStamp;
        return time instanceof Date
            ? time
            : createTimeStamp
                ? new Date(createTimeStamp)
                : undefined;
    }
    get lastUpdated() {
        const updateTimeStamp = this.$page.updateTimeStamp;
        return updateTimeStamp ? new Date(updateTimeStamp) : new Date();
    }
    get content() {
        var _a;
        if (this.feedOption.content)
            return this.feedOption.content;
        // eslint-disable-next-line no-underscore-dangle
        const { html } = this.context.markdown.render(((_a = this.page) === null || _a === void 0 ? void 0 : _a._strippedContent) || "");
        return utils_1.resolveHTML(html);
    }
    get image() {
        var _a;
        const { image } = this.frontmatter;
        if (image) {
            if (utils_1.isAbsoluteUrl(image))
                return utils_1.resolveUrl(this.options.hostname, this.context.base, image);
            if (utils_1.isUrl(image))
                return image;
        }
        const result = /!\[.*?\]\((.*?)\)/iu.exec(((_a = this.page) === null || _a === void 0 ? void 0 : _a._strippedContent) || "");
        if (result) {
            if (utils_1.isAbsoluteUrl(result[1]))
                return utils_1.resolveUrl(this.options.hostname, this.context.base, result[1]);
            if (utils_1.isUrl(result[1]))
                return result[1];
        }
        return undefined;
    }
    get contributor() {
        if (Array.isArray(this.feedOption.contributor))
            return this.feedOption.contributor;
        if (typeof this.feedOption.contributor === "object")
            return [this.feedOption.contributor];
        return this.author;
    }
    get copyright() {
        if (this.frontmatter.copyrightText)
            return this.frontmatter.copyrightText;
        const firstAuthor = this.author[0];
        if (firstAuthor === null || firstAuthor === void 0 ? void 0 : firstAuthor.name)
            return `Copyright by ${firstAuthor.name}`;
        return undefined;
    }
    getFeedItem() {
        const { author, category, content, contributor, copyright, description, enclosure, guid, image, lastUpdated, link, pubDate, title, } = this;
        // we need at least title or description
        if (!title && !description)
            return false;
        // add category to feed
        if (category)
            category.forEach((item) => this.feed.addCategory(item.name));
        // add contributor to feed
        if (contributor)
            contributor.forEach((item) => this.feed.addContributor(item));
        return {
            title,
            link,
            description,
            author,
            category,
            enclosure,
            guid,
            pubDate,
            lastUpdated,
            content,
            image,
            contributor,
            copyright,
        };
    }
}
exports.FeedPage = FeedPage;
//# sourceMappingURL=page.js.map