"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.genSiteMap = void 0;
const chalk_1 = require("chalk");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const sitemap_1 = require("sitemap");
const stripLocalePrefix = (path, localePathPrefixes) => {
    const matchingPrefix = localePathPrefixes
        .filter((prefix) => path.startsWith(prefix))
        .shift();
    return {
        normalizedPath: path.replace(matchingPrefix, "/"),
        localePrefix: matchingPrefix,
    };
};
const generatePageMap = (siteData, base, options) => {
    const { changefreq = "daily", exclude = [], dateFormatter = (page) => page.updateTimeStamp ? new Date(page.updateTimeStamp).toISOString() : "", } = options;
    const { pages, locales = {} } = siteData;
    // Sort the locale keys in reverse order so that longer locales, such as '/en/', match before the default '/'
    const localeKeys = Object.keys(locales).sort().reverse();
    const localesByNormalizedPagePath = pages.reduce((map, page) => {
        const { normalizedPath, localePrefix } = stripLocalePrefix(page.path, localeKeys);
        const prefixesByPath = map.get(normalizedPath) || [];
        prefixesByPath.push(localePrefix);
        return map.set(normalizedPath, prefixesByPath);
    }, new Map());
    const pagesMap = new Map();
    pages.forEach((page) => {
        const frontmatterOptions = page.frontmatter.sitemap || {};
        const metaRobots = (page.frontmatter.meta || []).find((meta) => meta.name === "robots");
        const excludePage = metaRobots
            ? (metaRobots.content || "")
                .split(/,/u)
                .map((content) => content.trim())
                .includes("noindex")
            : frontmatterOptions.exclude;
        if (excludePage)
            exclude.push(page.path);
        const lastmodifyTime = dateFormatter(page);
        const { normalizedPath } = stripLocalePrefix(page.path, localeKeys);
        const relatedLocales = localesByNormalizedPagePath.get(normalizedPath) || [];
        let links = [];
        if (relatedLocales.length > 1)
            links = relatedLocales.map((localePrefix) => ({
                lang: locales[localePrefix].lang || "en",
                url: `${base}${normalizedPath.replace("/", localePrefix)}`,
            }));
        pagesMap.set(page.path, Object.assign(Object.assign({}, frontmatterOptions), { changefreq: frontmatterOptions.changefreq || changefreq, lastmod: lastmodifyTime, links }));
    });
    return pagesMap;
};
const genSiteMap = async (options, context) => {
    console.log(chalk_1.blue("Sitemap:"), chalk_1.black.bgYellow("wait"), "Generating sitemap...");
    const siteData = context.getSiteData();
    const { hostname, urls = [], outFile = "sitemap.xml", xslUrl, exclude = [], xmlNameSpace: xmlns, } = options;
    const sitemap = new sitemap_1.SitemapStream({
        hostname,
        xslUrl,
        xmlns,
    });
    const sitemapXMLPath = path_1.resolve(context.outDir, outFile);
    const writeStream = fs_extra_1.createWriteStream(sitemapXMLPath);
    sitemap.pipe(writeStream);
    const base = siteData.base.replace(/\/$/u, "");
    const pagesMap = generatePageMap(siteData, base, options);
    pagesMap.forEach((page, url) => {
        if (!exclude.includes(url))
            sitemap.write(Object.assign({ url: `${base}${url}` }, page));
    });
    urls.forEach((item) => sitemap.write(item));
    sitemap.end();
    console.log(chalk_1.blue("Sitemap:"), chalk_1.black.bgGreen("Success"), `Sitemap generated and saved to ${chalk_1.cyan(path_1.relative(context.cwd, sitemapXMLPath))}`);
    const robotTxtPath = path_1.resolve(context.outDir, "robots.txt");
    const robotsTxt = fs_extra_1.existsSync(robotTxtPath)
        ? await fs_extra_1.readFile(robotTxtPath, { encoding: "utf8" })
        : "";
    const newRobotsTxtContent = `${robotsTxt.replace(/^Sitemap: .*$/u, "")}\nSitemap: ${options.hostname.replace(/\/$/u, "")}${context.base}${outFile}\n`;
    await fs_extra_1.writeFile(robotTxtPath, newRobotsTxtContent, { flag: "w" });
    console.log(chalk_1.blue("Sitemap:"), chalk_1.black.bgGreen("Success"), `Appended sitemap path to ${chalk_1.cyan("robots.txt")}`);
};
exports.genSiteMap = genSiteMap;
//# sourceMappingURL=sitemap.js.map