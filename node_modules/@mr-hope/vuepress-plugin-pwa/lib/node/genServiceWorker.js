"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.genServiceWorker = void 0;
const chalk_1 = require("chalk");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const WorkboxBuild = require("workbox-build");
const imageFilter = (outDir, maxsize = 1024) => (manifestEntries) => {
    const warnings = [];
    const manifest = [];
    const imageExtensions = [".png", ".jpg", ".jpeg", "webp", "bmp", "gif"];
    for (const entry of manifestEntries)
        if (imageExtensions.some((ext) => entry.url.endsWith(ext))) {
            const stats = fs_extra_1.statSync(path_1.resolve(outDir, entry.url));
            if (stats.size > maxsize * 1024)
                warnings.push(`Skipped ${entry.url}, as its ${Math.ceil(stats.size / 1024)} KB.\n`);
            else
                manifest.push(entry);
        }
        else
            manifest.push(entry);
    return { warnings, manifest };
};
const genServiceWorker = async (options, context) => {
    console.log(chalk_1.blue("PWA:"), chalk_1.black.bgYellow("wait"), "Generating service worker...");
    const swDest = path_1.resolve(context.outDir, "./service-worker.js");
    const additionalManifestEntries = [];
    const globPatterns = ["**/*.{js,css,svg}", "**/*.{woff,woff2,eot,ttf,otf}"];
    if (options.cacheHTML === false)
        globPatterns.push("./index.html", "./404.html");
    else
        globPatterns.push("**/*.html");
    if (options.cachePic)
        globPatterns.push("**/*.{png,jpg,jpeg,bmp,gif,webp}");
    await WorkboxBuild.generateSW(Object.assign({ swDest, globDirectory: context.outDir, cacheId: context.siteConfig.name || "mr-hope", globPatterns,
        additionalManifestEntries, cleanupOutdatedCaches: true, clientsClaim: true, maximumFileSizeToCacheInBytes: (options.maxSize || 2048) * 1024, manifestTransforms: [imageFilter(context.outDir, options.maxPicSize)] }, (options.generateSWConfig || {}))).then(({ count, size, warnings }) => {
        console.log(chalk_1.blue("PWA:"), chalk_1.black.bgGreen("Success"), `Generated service worker, which will precache ${chalk_1.cyan(`${count} files`)}, totaling ${chalk_1.cyan(`${(size / 1024 / 1024).toFixed(2)} Mb`)}.`);
        if (warnings.length)
            console.log(chalk_1.blue("PWA:"), chalk_1.black.bgYellow("Warning"), `${warnings.map((warning) => `  Â· ${warning}`).join("\n")}`);
        if (size > 104857600)
            console.log(chalk_1.blue("PWA:"), chalk_1.black.bgRed("Error"), "Cache Size is larger than 100MB, so that it can not be registerd on all browsers.\n", chalk_1.blue("Please consider disable `cacheHTML` and `cachePic`, or set `maxSize` and `maxPicSize` option.\n"));
        else if (size > 52428800)
            console.log(chalk_1.blue("PWA:"), chalk_1.black.bgYellow("Warning"), "\nCache Size is larger than 50MB, which will not be registerd on Safari.\n", chalk_1.blue("Please consider disable `cacheHTML` and `cachePic`, or set `maxSize` and `maxPicSize` option.\n"));
    });
    await fs_extra_1.writeFile(swDest, await fs_extra_1.readFile(path_1.resolve(__dirname, "./skip-waiting.js"), "utf8"), { flag: "a" });
};
exports.genServiceWorker = genServiceWorker;
//# sourceMappingURL=genServiceWorker.js.map