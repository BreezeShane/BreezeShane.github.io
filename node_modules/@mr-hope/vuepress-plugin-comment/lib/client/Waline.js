import Vue from "vue";
import { valineI18n } from "./define";
let timeout = null;
export default Vue.extend({
    name: "Valine",
    props: {
        walineConfig: {
            type: Object,
            required: true,
        },
    },
    data: () => ({
        waline: null,
    }),
    computed: {
        walineEnable() {
            const { walineConfig } = this;
            return Boolean(walineConfig === null || walineConfig === void 0 ? void 0 : walineConfig.serverURL);
        },
        commentDisplay() {
            if (!this.walineEnable)
                return false;
            const globalEnable = this.walineConfig.comment !== false;
            const pageEnable = this.$page.frontmatter.comment;
            return (globalEnable && pageEnable !== false) || pageEnable === true;
        },
        /** Whether to display view number */
        visitorDisplay() {
            if (!this.walineEnable)
                return false;
            const globalEnable = this.walineConfig.visitor !== false;
            const pageEnable = this.$page.frontmatter.visitor;
            return (globalEnable && pageEnable !== false) || pageEnable === true;
        },
    },
    watch: {
        $route(to, from) {
            // Refresh comment when navigating to a new page
            if (to.path !== from.path) {
                Vue.nextTick(() => {
                    if (timeout)
                        clearTimeout(timeout);
                    timeout = setTimeout(() => {
                        var _a;
                        (_a = this.waline) === null || _a === void 0 ? void 0 : _a.update({});
                    }, 1000);
                });
            }
        },
    },
    mounted() {
        if (this.walineEnable)
            timeout = setTimeout(() => {
                const { walineConfig } = this;
                void import(/* webpackChunkName: "waline" */ "@waline/client").then(({ default: Waline }) => {
                    this.waline = Waline(Object.assign(Object.assign({ el: "#waline-comment", lang: this.$lang === "zh-CN" ? "zh-CN" : "en-US", locale: {
                            placeholder: valineI18n[this.$localePath || "/"],
                        }, meta: walineConfig.meta || ["nick", "mail"], requiredMeta: walineConfig.requiredMeta || ["nick"], avatar: walineConfig.avatar || "retro", emoji: [
                            "https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili",
                            "https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo",
                        ] }, walineConfig), { dark: "body.theme-dark", visitor: this.visitorDisplay, path: typeof window === "undefined" ? "" : window.location.pathname }));
                });
            }, 1000);
    },
    // eslint-disable-next-line vue/no-deprecated-destroyed-lifecycle
    beforeDestroy() {
        var _a;
        if (timeout)
            clearTimeout(timeout);
        (_a = this.waline) === null || _a === void 0 ? void 0 : _a.destroy();
    },
});
//# sourceMappingURL=Waline.js.map