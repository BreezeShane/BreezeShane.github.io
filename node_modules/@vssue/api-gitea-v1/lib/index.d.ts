import { VssueAPI } from 'vssue';
import { AxiosInstance } from 'axios';
import { ResponseLabel } from './types';
/**
 * Gitea API V1
 *
 * @see https://docs.gitea.io/en-us/oauth2-provider/
 * @see https://docs.gitea.io/en-us/api-usage
 * @see https://gitea.com/api/swagger
 */
export default class GiteaV1 implements VssueAPI.Instance {
    baseURL: string;
    owner: string;
    repo: string;
    labels: Array<string>;
    clientId: string;
    clientSecret: string;
    state: string;
    proxy: string | ((url: string) => string);
    $http: AxiosInstance;
    constructor({ baseURL, owner, repo, labels, clientId, clientSecret, state, proxy, }: VssueAPI.Options);
    /**
     * The platform api info
     */
    get platform(): VssueAPI.Platform;
    /**
     * Redirect to the authorization page of platform.
     *
     * @see https://docs.gitea.io/en-us/oauth2-provider/
     */
    redirectAuth(): void;
    /**
     * Handle authorization.
     *
     * @see https://docs.gitea.io/en-us/oauth2-provider/
     *
     * @remarks
     * If the `code` and `state` exist in the query, and the `state` matches, remove them from query, and try to get the access token.
     */
    handleAuth(): Promise<VssueAPI.AccessToken>;
    /**
     * Get user access token via `code`
     *
     * @see https://docs.gitea.io/en-us/oauth2-provider/
     */
    getAccessToken({ code }: {
        code: string;
    }): Promise<string>;
    /**
     * Get the logged-in user with access token.
     *
     * @see https://gitea.com/api/swagger#/user/userGetCurrent
     */
    getUser({ accessToken, }: {
        accessToken: VssueAPI.AccessToken;
    }): Promise<VssueAPI.User>;
    /**
     * Get issue of this page according to the issue id or the issue title
     *
     * @see https://gitea.com/api/swagger#/issue/issueListIssues
     * @see https://gitea.com/api/swagger#/issue/issueGetIssue
     */
    getIssue({ accessToken, issueId, issueTitle, }: {
        accessToken: VssueAPI.AccessToken;
        issueId?: string | number;
        issueTitle?: string;
    }): Promise<VssueAPI.Issue | null>;
    /**
     * Create a new issue
     *
     * @see https://gitea.com/api/swagger#/issue/issueCreateIssue
     */
    postIssue({ accessToken, title, content, }: {
        accessToken: VssueAPI.AccessToken;
        title: string;
        content: string;
    }): Promise<VssueAPI.Issue>;
    /**
     * Get comments of this page according to the issue id
     *
     * @see https://gitea.com/api/swagger#/issue/issueGetComments
     */
    getComments({ accessToken, issueId, query: { page, perPage, sort }, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        query?: Partial<VssueAPI.Query>;
    }): Promise<VssueAPI.Comments>;
    /**
     * Create a new comment
     *
     * @see https://gitea.com/api/swagger#/issue/issueCreateComment
     */
    postComment({ accessToken, issueId, content, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        content: string;
    }): Promise<VssueAPI.Comment>;
    /**
     * Edit a comment
     *
     * @see https://gitea.com/api/swagger#/issue/issueEditCommentDeprecated
     */
    putComment({ accessToken, issueId, commentId, content, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        commentId: string | number;
        content: string;
    }): Promise<VssueAPI.Comment>;
    /**
     * Delete a comment
     *
     * @see https://gitea.com/api/swagger#/issue/issueDeleteCommentDeprecated
     */
    deleteComment({ accessToken, commentId, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        commentId: string | number;
    }): Promise<boolean>;
    /**
     * Get reactions of a comment
     *
     * @see https://gitea.com/api/swagger#/issue/issueGetCommentReactions
     */
    getCommentReactions({ accessToken, commentId, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        commentId: string | number;
    }): Promise<VssueAPI.Reactions>;
    /**
     * Create a new reaction of a comment
     *
     * @see https://gitea.com/api/swagger#/issue/issuePostCommentReaction
     */
    postCommentReaction({ commentId, reaction, accessToken, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        commentId: string | number;
        reaction: keyof VssueAPI.Reactions;
    }): Promise<boolean>;
    /**
     * Create a new reaction of a comment
     *
     * @see https://gitea.com/api/swagger#/issue/issueDeleteCommentReaction
     */
    deleteCommentReaction({ commentId, reaction, accessToken, }: {
        accessToken: VssueAPI.AccessToken;
        commentId: string | number;
        reaction: keyof VssueAPI.Reactions;
    }): Promise<boolean>;
    /**
     * Get labels
     *
     * @see https://gitea.com/api/swagger#/issue/issueListLabels
     */
    getLabels({ accessToken, }: {
        accessToken: VssueAPI.AccessToken;
    }): Promise<ResponseLabel[]>;
    /**
     * Create label
     *
     * @see https://gitea.com/api/swagger#/issue/issueCreateLabel
     */
    postLabel({ accessToken, label, color, description, }: {
        accessToken: VssueAPI.AccessToken;
        label: string;
        color?: string;
        description?: string;
    }): Promise<number>;
    /**
     * Get the parse HTML of markdown content
     *
     * @see https://gitea.com/api/swagger#/miscellaneous/renderMarkdown
     */
    getMarkdownContent({ accessToken, contentRaw, }: {
        accessToken?: VssueAPI.AccessToken;
        contentRaw: string;
    }): Promise<string>;
}
