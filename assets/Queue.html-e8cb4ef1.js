import{_ as n,W as s,X as a,a1 as e}from"./framework-68a75bb9.js";const t="/images/DataStructuresAndAlgorithms/Queue.png",p="/images/DataStructuresAndAlgorithms/CircularQueue.png",o={},c=e('<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>队列是限制结点插入操作固定在一端进行,而结点的删除操作固定在另一端进行的一种特殊线性表，特殊在于它操作受限，仅能使用入队、出队操作。</p><p>如图所示：</p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>结构定义代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">SeqQueue</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> MAXNUM<span class="token punctuation">;</span>
	<span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
	DataType <span class="token operator">*</span>list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SeqQueue</span><span class="token operator">*</span> PSeqQueue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题" aria-hidden="true">#</a> 存在的问题</h3><p>如果经过某种一系列操作后，head的索引在某个非零整数上，而tail的索引到达了最后一个元素的索引。这时即使显然线性表未满，我们仍可发现我们无法继续进行插入。为了缓解这个问题，我们使用以下的队列变种——循环队列。</p><h2 id="循环队列" tabindex="-1"><a class="header-anchor" href="#循环队列" aria-hidden="true">#</a> 循环队列</h2><p>由于我们无法完全确定索引head和tail的确切位置，因此我们就将线性的数组掰弯，构成一个闭环，从而达到循环的效果。</p><p>如图所示：</p><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="出现的问题" tabindex="-1"><a class="header-anchor" href="#出现的问题" aria-hidden="true">#</a> 出现的问题</h3><p>如果装满了元素，有可能队首和队尾重合，导致无法真正区分空与满的两个状态。</p><h3 id="缓解方案" tabindex="-1"><a class="header-anchor" href="#缓解方案" aria-hidden="true">#</a> 缓解方案</h3><p>我们不会使用数组中的最后一个空间，以免导致以上问题。</p><h2 id="循环队列的基本实现" tabindex="-1"><a class="header-anchor" href="#循环队列的基本实现" aria-hidden="true">#</a> 循环队列的基本实现</h2><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//用于创建队列</span>
PseqQueue <span class="token function">createNullQueue_seq</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>m <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    PseqQueue Queue <span class="token operator">=</span> <span class="token punctuation">(</span>PseqQueue<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seqQueue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Queue<span class="token operator">-&gt;</span>MAXNUM <span class="token operator">=</span> m<span class="token punctuation">;</span>
    Queue<span class="token operator">-&gt;</span>head <span class="token operator">=</span> Queue<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Queue<span class="token operator">-&gt;</span>list <span class="token operator">=</span> <span class="token punctuation">(</span>DataType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DataType<span class="token punctuation">)</span> <span class="token operator">*</span> Queue<span class="token operator">-&gt;</span>MAXNUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Queue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="入队" tabindex="-1"><a class="header-anchor" href="#入队" aria-hidden="true">#</a> 入队</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//判断队列是否为空或者不存在</span>
<span class="token keyword">int</span> <span class="token function">isNullQueue_seq</span><span class="token punctuation">(</span>PseqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>Q <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>list<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> Q<span class="token operator">-&gt;</span>head <span class="token operator">==</span> Q<span class="token operator">-&gt;</span>tail <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//判断队列是否已满</span>
<span class="token keyword">int</span> <span class="token function">isFullQueue_seq</span><span class="token punctuation">(</span>PseqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> Q<span class="token operator">-&gt;</span>head <span class="token operator">==</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Q<span class="token operator">-&gt;</span>MAXNUM <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//进行队列的入队操作</span>
<span class="token keyword">int</span> <span class="token function">enQueue_seq</span><span class="token punctuation">(</span>PseqQueue Q <span class="token punctuation">,</span>DataType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isNullQueue_seq</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">isFullQueue_seq</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Q<span class="token operator">-&gt;</span>list<span class="token punctuation">[</span>Q<span class="token operator">-&gt;</span>tail <span class="token operator">%</span> Q<span class="token operator">-&gt;</span>MAXNUM<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//这里的取模是关键</span>
    Q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Q<span class="token operator">-&gt;</span>MAXNUM<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="出队" tabindex="-1"><a class="header-anchor" href="#出队" aria-hidden="true">#</a> 出队</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//进行队列的出队操作</span>
DataType <span class="token function">delQueue_seq</span><span class="token punctuation">(</span>PseqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isNullQueue_seq</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> toReturn <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>list<span class="token punctuation">[</span>Q<span class="token operator">-&gt;</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>
    Q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Q<span class="token operator">-&gt;</span>MAXNUM<span class="token punctuation">;</span><span class="token comment">//这里的取模是关键</span>
    <span class="token keyword">return</span> toReturn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取" tabindex="-1"><a class="header-anchor" href="#读取" aria-hidden="true">#</a> 读取</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//从队首中读取元素</span>
DataType <span class="token function">front_seq</span><span class="token punctuation">(</span>PseqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isNullQueue_seq</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Q<span class="token operator">-&gt;</span>list<span class="token punctuation">[</span>Q<span class="token operator">-&gt;</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//获取队列中存放元素格</span>
DataType <span class="token function">computeNum</span><span class="token punctuation">(</span>PseqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>tail <span class="token operator">-</span> Q<span class="token operator">-&gt;</span>head <span class="token operator">+</span> Q<span class="token operator">-&gt;</span>MAXNUM<span class="token punctuation">)</span> <span class="token operator">%</span> Q<span class="token operator">-&gt;</span>MAXNUM<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="销毁" tabindex="-1"><a class="header-anchor" href="#销毁" aria-hidden="true">#</a> 销毁</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//销毁整个队列线性表</span>
<span class="token keyword">int</span> <span class="token function">destroyQueue_seq</span><span class="token punctuation">(</span>PseqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNullQueue_seq</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> totalNum <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>tail <span class="token operator">-</span> Q<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> totalNum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="易错点" tabindex="-1"><a class="header-anchor" href="#易错点" aria-hidden="true">#</a> 易错点</h2><p>上面写有取模是关键的两个地方是易错点，因为我们常常会忽略掉索引越界的问题，实际上应该去取模来保证不会数组越界访问。</p>`,29),l=[c];function i(u,r){return s(),a("div",null,l)}const d=n(o,[["render",i],["__file","Queue.html.vue"]]);export{d as default};
