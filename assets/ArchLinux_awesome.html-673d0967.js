import{_ as i,W as o,X as c,Y as n,Z as e,$ as a,a1 as t,C as l}from"./framework-68a75bb9.js";const d={},p=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),e(" 前言")],-1),r=n("p",null,"这几次使用Linux系统的经历让我明白了一件事：用这用那别人帮你配好的系统，基本上都是刚用的时候好好的，到后面就直接G掉了，还远不如从一开始就自己配置自己搞起来。",-1),u=n("p",null,"所以现在我正式进军Arch Linux了！",-1),v={href:"https://breezeshane.github.io/Linux/Manjaro%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://breezeshane.github.io/Linux/ArcolinuxAndAwesomeWM/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"刚开始的Awesome相当精简，这时候可以开始进行配置了。",-1),h=n("h2",{id:"修改默认应用程序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#修改默认应用程序","aria-hidden":"true"},"#"),e(" 修改默认应用程序")],-1),_={href:"https://blog.csdn.net/iteye_6393/article/details/82231282",target:"_blank",rel:"noopener noreferrer"},g=t('<p>随着使用时间增长，有些文件可以由许多应用打开，这难免会发生冲突，尤其在习惯以某个应用打开之后在近期装了新软件把默认配置覆盖掉的时候，就会直接高血压。但还好有办法解决这个问题。</p><p>首先要知道系统依靠什么来设定文件到应用的映射：通过<code>/usr/share/applications</code>下的<code>desktop</code>文件来设定关联。可以通过<code>ls /usr/share/applications</code>来查看当前可以设定的关联。</p><p>因此修改的流程应该是：</p><ol><li>先通过<code>ls /usr/share/applications</code>找到要找的关联desktop文件</li><li>执行命令<code>xdg-mime query filetype &lt;你要查看文件的文件名&gt;</code>，比如当前目录有<code>file.md</code>，我就可以执行<code>xdg-mime query filetype file.md</code>，这样就可以查询这个文件类型当前设置的默认应用程序是什么</li><li>（可以不做）也可以执行命令<code>xdg-mime query default application/&lt;文件后缀&gt;</code>来查看这个文件类型当前设置的默认应用程序。</li><li>执行命令<code>xdg-mime default &lt;第一步你选择的结果&gt; application/&lt;文件后缀&gt;</code>来设定应用与文件类型的关联。</li></ol><p>修改是立即生效的，因此不用重启计算机。</p><h2 id="调节屏幕亮度问题" tabindex="-1"><a class="header-anchor" href="#调节屏幕亮度问题" aria-hidden="true">#</a> 调节屏幕亮度问题</h2>',6),E=n("p",null,"参考资料：",-1),f={href:"https://blog.51cto.com/u_15065851/4581547",target:"_blank",rel:"noopener noreferrer"},x={href:"https://wiki.archlinux.org/title/Keyboard_input#Identifying_scancodes",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.bilibili.com/read/cv5156572",target:"_blank",rel:"noopener noreferrer"},w={href:"https://discourse.coreelec.org/t/what-to-name-the-hwdb-file/8341",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>我的笔记本内嵌键盘上有一些功能键不能正常响应，本节以屏幕亮度调节功能键为例，当我通过journalctl查询发现是系统不认识这两个键是什么，于是我根据所学想：键盘在按下按键的时候会产生扫描码(Scan Code)，然后发送给系统内核根据映射表得到按键码(Key Code)，最后做相应的响应。系统既然是不认识，那就说明是中间的映射有些问题，少了这两个功能键的映射。于是解决这个问题的第一步就是要先创建起来这个映射。</p><p>首先需要知道这两个按键的扫描码是多少，所以需要先使用root权限运行<code>showkey -s</code>来看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Arknights% <span class="token function">sudo</span> showkey <span class="token parameter variable">-s</span>
kb mode was ?UNKNOWN?
<span class="token punctuation">[</span> <span class="token keyword">if</span> you are trying this under X, it might not work
since the X server is also reading /dev/console <span class="token punctuation">]</span>

press any key <span class="token punctuation">(</span>program terminates 10s after last keypress<span class="token punctuation">)</span><span class="token punctuation">..</span>.
0x9c
0xe0 0x4c 0xe0 0xcc
0xe0 0x54 0xe0 0xd4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要知道，这里输出的十六进制码是一个事件对应两段的，因此按下按键是<code>0xe0 0x4c</code>和<code>0xe0 0x54</code>，松开按键是<code>0xe0 0xcc</code>和<code>0xe0 0xd4</code>，我们只需要关心按下按键这里。</p>`,4),S={href:"https://www.bilibili.com/read/cv5156572",target:"_blank",rel:"noopener noreferrer"},C={class:"hint-container details"},D=t(`<summary>参照失败的部分</summary><p>搞清楚扫描码之后，我们需要关注设备的event文件，执行<code>sudo evtest</code>来列出系统目前在使用的输入设备，如下是我执行之后的结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> Arknights% evtest
No device specified, trying to scan all of /dev/input/event*
Not running as root, no devices may be available.
Available devices:
Select the device event number <span class="token punctuation">[</span><span class="token number">0</span>-0<span class="token punctuation">]</span>: ^C
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> Arknights% <span class="token function">sudo</span> evtest
<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> password <span class="token keyword">for</span> breezeshane:
No device specified, trying to scan all of /dev/input/event*
Available devices:
/dev/input/event0:	Power Button
/dev/input/event1:	Lid Switch
/dev/input/event10:	HDA Intel PCH Headphone
/dev/input/event11:	PC Speaker
/dev/input/event12:	Video Bus
/dev/input/event13:	Video Bus
/dev/input/event14:	HDA Intel PCH HDMI/DP,pcm<span class="token operator">=</span><span class="token number">3</span>
/dev/input/event15:	HDA Intel PCH HDMI/DP,pcm<span class="token operator">=</span><span class="token number">8</span>
/dev/input/event16:	Logitech MX Master <span class="token number">3</span>
/dev/input/event17:	EDFIER EDIFIER W820NB
/dev/input/event2:	Power Button
/dev/input/event3:	AT Translated Set <span class="token number">2</span> keyboard
/dev/input/event4:	ov9734_azurewave_camera: ov9734
/dev/input/event5:	HDA Intel PCH HDMI/DP,pcm<span class="token operator">=</span><span class="token number">7</span>
/dev/input/event6:	ELAN2204:00 04F3:30F5 Mouse
/dev/input/event7:	ELAN2204:00 04F3:30F5 Touchpad
/dev/input/event8:	IQUNIX OG80 BT1
/dev/input/event9:	Huawei WMI hotkeys
Select the device event number <span class="token punctuation">[</span><span class="token number">0</span>-17<span class="token punctuation">]</span>:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我要修改的是笔记本键盘，所以应该找<code>AT Translated Set 2 keyboard</code>，因此可以直接响应这个<code>Select the device event number [0-17]:</code>的请求，输入3，也可以直接执行命令<code>sudo evtest /dev/input/event3</code>，从此进入了这个键盘的test mode。</p><p>接下来会看到这里的输出信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> Arknights% <span class="token function">sudo</span> evtest /dev/input/event3
Input driver version is <span class="token number">1.0</span>.1
Input device ID: bus 0x11 vendor 0x1 product 0x1 version 0xab83
Input device name: <span class="token string">&quot;AT Translated Set 2 keyboard&quot;</span>
Supported events:
  Event <span class="token builtin class-name">type</span> <span class="token number">0</span> <span class="token punctuation">(</span>EV_SYN<span class="token punctuation">)</span>
  Event <span class="token builtin class-name">type</span> <span class="token number">1</span> <span class="token punctuation">(</span>EV_KEY<span class="token punctuation">)</span>
    Event code <span class="token number">1</span> <span class="token punctuation">(</span>KEY_ESC<span class="token punctuation">)</span>
    <span class="token comment"># ......</span>
  Event <span class="token builtin class-name">type</span> <span class="token number">4</span> <span class="token punctuation">(</span>EV_MSC<span class="token punctuation">)</span>
    Event code <span class="token number">4</span> <span class="token punctuation">(</span>MSC_SCAN<span class="token punctuation">)</span>
  Event <span class="token builtin class-name">type</span> <span class="token number">17</span> <span class="token punctuation">(</span>EV_LED<span class="token punctuation">)</span>
    Event code <span class="token number">0</span> <span class="token punctuation">(</span>LED_NUML<span class="token punctuation">)</span> state <span class="token number">0</span>
    Event code <span class="token number">1</span> <span class="token punctuation">(</span>LED_CAPSL<span class="token punctuation">)</span> state <span class="token number">0</span>
    Event code <span class="token number">2</span> <span class="token punctuation">(</span>LED_SCROLLL<span class="token punctuation">)</span> state <span class="token number">0</span>
Key repeat handling:
  Repeat <span class="token builtin class-name">type</span> <span class="token number">20</span> <span class="token punctuation">(</span>EV_REP<span class="token punctuation">)</span>
    Repeat code <span class="token number">0</span> <span class="token punctuation">(</span>REP_DELAY<span class="token punctuation">)</span>
      Value    <span class="token number">250</span>
    Repeat code <span class="token number">1</span> <span class="token punctuation">(</span>REP_PERIOD<span class="token punctuation">)</span>
      Value     <span class="token number">33</span>
Properties:
Testing <span class="token punctuation">..</span>. <span class="token punctuation">(</span>interrupt to <span class="token builtin class-name">exit</span><span class="token punctuation">)</span>
Event: <span class="token function">time</span> <span class="token number">1673126309.355515</span>, <span class="token builtin class-name">type</span> <span class="token number">4</span> <span class="token punctuation">(</span>EV_MSC<span class="token punctuation">)</span>, code <span class="token number">4</span> <span class="token punctuation">(</span>MSC_SCAN<span class="token punctuation">)</span>, value f8
Event: <span class="token function">time</span> <span class="token number">1673126309.355515</span>, -------------- SYN_REPORT ------------
Event: <span class="token function">time</span> <span class="token number">1673126309.471303</span>, <span class="token builtin class-name">type</span> <span class="token number">4</span> <span class="token punctuation">(</span>EV_MSC<span class="token punctuation">)</span>, code <span class="token number">4</span> <span class="token punctuation">(</span>MSC_SCAN<span class="token punctuation">)</span>, value f8
Event: <span class="token function">time</span> <span class="token number">1673126309.471303</span>, -------------- SYN_REPORT ------------
Event: <span class="token function">time</span> <span class="token number">1673126310.343339</span>, <span class="token builtin class-name">type</span> <span class="token number">4</span> <span class="token punctuation">(</span>EV_MSC<span class="token punctuation">)</span>, code <span class="token number">4</span> <span class="token punctuation">(</span>MSC_SCAN<span class="token punctuation">)</span>, value f8
Event: <span class="token function">time</span> <span class="token number">1673126310.343339</span>, -------------- SYN_REPORT ------------
Event: <span class="token function">time</span> <span class="token number">1673126310.428278</span>, <span class="token builtin class-name">type</span> <span class="token number">4</span> <span class="token punctuation">(</span>EV_MSC<span class="token punctuation">)</span>, code <span class="token number">4</span> <span class="token punctuation">(</span>MSC_SCAN<span class="token punctuation">)</span>, value f8
Event: <span class="token function">time</span> <span class="token number">1673126310.428278</span>, -------------- SYN_REPORT ------------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),B=n("code",null,"Properties: Testing ... (interrupt to exit)",-1),N={href:"https://www.kernel.org/doc/Documentation/input/event-codes.txt",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"Event types",-1),L=n("p",null,"但是，我发现，这两个按键其实都被置成同一个值f8了，显然这个不应该是我们要找的，可能教程没有错误而是我的设备并不适合这个情景，但是教程给出的思路依旧是正确的，很有参考价值，考虑到这部分内容对实际我要解决的问题相关度不高，因此将这部分折叠掉了。",-1),M=t(`<p>根据Archwiki的对应文档<code>Keyboard input</code>我们可以在<code>/usr/include/linux/input-event-codes.h</code>中找到我们要找的屏幕亮度对应的键位码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY_BRIGHTNESSDOWN</span>	<span class="token expression"><span class="token number">224</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY_BRIGHTNESSUP</span>	<span class="token expression"><span class="token number">225</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),P={href:"https://www.bilibili.com/read/cv5156572",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"/usr/lib/udev/hwdb.d/",-1),Y=n("code",null,"/etc/udev/hwdb.d/",-1),K=t(`<div class="hint-container tip"><p class="hint-container-title">重要</p><p><code>/usr/lib/udev/hwdb.d/</code>目录下规则为默认规则，<code>/etc/udev/hwdb.d/</code>目录下对设备定义的规则如果和默认规则有冲突，会覆盖默认规则。这两个目录下的文件都遵守同一个命名规则<code>&lt;num&gt;-&lt;word&gt;.hwdb</code>，而且这两个目录在加载的时候都会按照数字从小到大的顺序进行加载。</p></div><p>我们在<code>/etc/udev/hwdb.d/</code>下创建一个新文件<code>99-custom-kbd.hwdb</code>，在里面填写如下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>evdev:atkdb:dim:*
# KEYBOARD_KEY_4C=brightnessdown
# KEYBOARD_KEY_54=brightnessup
 KEYBOARD_KEY_4C=224
 KEYBOARD_KEY_54=225
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这里面遵循写法是按照这个规则写的<code>KEYBOARD_KEY_&lt;Scan Code&gt;=&lt;Key Code&gt;</code>，这就是我们前面要花时间确定扫描码与键位码的原因。<code>4C</code>和<code>54</code>哪里来的？回到前面我们用<code>showkey -s</code>的部分，我们找出的按下的扫描码是<code>0xe0 0x4c</code>和<code>0xe0 0x54</code>，其中<code>0xe0</code>是固定前缀，后面的才是我们真正需要的扫描码。</p><p>最后我们再更新一下配置，执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> udevadm hwdb <span class="token parameter variable">--update</span> <span class="token comment"># 重新编译二进制的数据库内容</span>
<span class="token function">sudo</span> udevadm trigger <span class="token comment"># 立刻重新触发所有输入设备，让更改立刻生效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>如果删除其中某个规则，直到重启计算机之前，原有规则都会依然保留在内核中，该规则仍会生效。</p></div><p>以上一切都完成之后，我们就可以安装相应工具来实现屏幕亮度调节功能了：</p><p>首先我们不使用原生的<code>xorg-xbacklight</code>，因为这个要直接操作设备文件才能实现，往往会遇到缺少权限，因此我们使用替代品<code>acpilight</code>（运行<code>sudo pacman -S acpilight</code>即可安装），安装之后我们还需要将当前用户组加入<code>video</code>组内，执行<code>sudo gpasswd video -a &lt;YOUR_USER_NAME&gt;</code>即可，如要确认该用户是否在组内，可以执行<code>groups &lt;YOUR_USER_NAME&gt;</code>，最后重启计算机即可。</p><div class="hint-container tip"><p class="hint-container-title">知识补充</p><p>要精准匹配键盘设备，应按照如下规则完整填写：</p><p>根据id精确匹配：<code>evdev:input:b&lt;bus_id&gt;v&lt;vendor_id&gt;p&lt;product_id&gt;v&lt;version_id&gt;</code></p><p>根据设备名匹配：<code>evdev:name:&lt;input_device_name&gt;:dmi:bvn*:bvr*:bd*:svn&lt;vendor&gt;:pn*</code></p><p>其中的<code>&lt;bus_id&gt;</code>、<code>&lt;vendor_id&gt;</code>、<code>&lt;product_id&gt;</code>、<code>&lt;vension_id&gt;</code>需要替换成刚刚记录的设备信息。<code>&lt;vendor&gt;</code>需要另一个软件包<code>evemu</code>提供的工具<code>evemu-describe</code>得到。</p><p><strong>填写时应该注意不够4位的数需要在前补0到4位，16进制数的a～f需要小写。</strong></p></div><h2 id="minecraft" tabindex="-1"><a class="header-anchor" href="#minecraft" aria-hidden="true">#</a> Minecraft</h2><p>我没想到Archlinux系也能直接下载安装Minecraft，但也不意外。下载安装<code>hmcl</code>和<code>jre8-openjdk</code>这两个包即可。</p><p>如果提示报错，请注意查看报错信息提示的版本号，然后用这个版本号将<code>jre8-openjdk</code>的<code>8</code>替换掉即可。</p><h2 id="启用时间同步" tabindex="-1"><a class="header-anchor" href="#启用时间同步" aria-hidden="true">#</a> 启用时间同步</h2><p>执行这一条命令即可：<code>sudo timedatectl set-ntp true</code></p><h2 id="authenticate-agent" tabindex="-1"><a class="header-anchor" href="#authenticate-agent" aria-hidden="true">#</a> Authenticate Agent</h2><p>在linux使用过程中，难免会遇到一些软件，不能直接用<code>sudo</code>运行，但需要root权限，比如<code>via-bin</code>、<code>gparted</code>，然后我在具体运行中遇到的错误信息如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>UnhandledPromiseRejectionWarning: Error: No polkit authentication agent found.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18),T={href:"https://wiki.archlinux.org/title/Polkit",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/lxqt/lxqt-policykit",target:"_blank",rel:"noopener noreferrer"},V={href:"http://blog.brz.ink/Linux/ArcolinuxAndAwesomeWM/#%E5%AE%89%E8%A3%85fcitx5%E8%BE%93%E5%85%A5%E6%B3%95%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AE%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,"这样就可以开始使用了，如果未见效请重启再尝试。",-1);function W(q,F){const s=l("ExternalLinkIcon");return o(),c("div",null,[p,r,u,n("p",null,[e("因为绝大多数操作，在"),n("a",v,[e("Manjaro"),a(s)]),e("、"),n("a",m,[e("ArcoLinux"),a(s)]),e("这两个系统上其实大同小异，所以这篇就略去许多细节了，发现有什么缺的去前面的记录找找罢。")]),n("p",null,[e("安装系统（按照"),n("a",b,[e("Wiki"),a(s)]),e("的安装就好，这里不再赘述），之后直接安装Awesome桌面环境和SDDM即可。")]),k,h,n("blockquote",null,[n("p",null,[e("参考资料： "),n("a",_,[e("ArchLinux如何设值文件的默认打开程序"),a(s)])])]),g,n("blockquote",null,[E,n("ol",null,[n("li",null,[n("a",f,[e("键盘键码对照 - 51CTO"),a(s)])]),n("li",null,[n("a",x,[e("Keyboard input - Archlinux Wiki"),a(s)])]),n("li",null,[n("a",A,[e("Linux通用键位修改（中）-实际操作"),a(s)])]),n("li",null,[n("a",w,[e("what to name the hwdb file - CoreELEC"),a(s)])])])]),y,n("p",null,[e("虽然我参照了"),n("a",S,[e("Linux通用键位修改（中）-实际操作"),a(s)]),e("这个教程，但是我发现不能完全按照他的步骤来执行，但是依旧可以参考他的思路：找出按键的扫描码，找出按键的键位码，然后自己编写扫描码-键位码的映射文件，再做一次更新。")]),n("details",C,[D,n("p",null,[e("这里我们通常关心"),B,e("之后的部分，但是如果有兴趣，可以看这个"),n("a",N,[e("文档"),a(s)]),e("来了解"),R,e("的具体作用。")]),L]),M,n("p",null,[e("接下来就应该去写规则了，需要注意的是，根据"),n("a",P,[e("Linux通用键位修改（中）-实际操作"),a(s)]),e("这个教程所说，"),I,e("这个目录是硬件厂商和操作系统共同维护的硬件数据库，一般不修改这下面的文件；而本机管理员维护的自定义硬件数据库位于"),Y,e("目录，显然我们做的自定义规则就要写在这里。")]),K,n("p",null,[e("于是我就明白这里是缺少了一个专用的助手来安全地授予我们权限，于是我花了一些时间查找，最后从"),n("a",T,[e("Polkit - ArchWiki"),a(s)]),e("里的1.1节Authentication agents中选了比较合适的"),n("a",O,[e("lxqt-policykit"),a(s)]),e("，这个可以直接用pacman安装。安装好之后我们只需要让它随系统启动即可，我是通过写入rc.lua配置文件启动列表来完成的，具体做法转到"),n("a",V,[e("这里"),a(s)]),e("。")]),H])}const j=i(d,[["render",W],["__file","ArchLinux_awesome.html.vue"]]);export{j as default};
