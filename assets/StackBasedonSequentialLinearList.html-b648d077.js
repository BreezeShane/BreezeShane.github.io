import{_ as n,W as s,X as a,a1 as t}from"./framework-68a75bb9.js";const p={},e=t(`<h2 id="栈的定义" tabindex="-1"><a class="header-anchor" href="#栈的定义" aria-hidden="true">#</a> 栈的定义</h2><p>栈是一种特殊的线性表，特殊在于该线性表的操作是受限的，只能访问与操作栈顶元素。</p><h2 id="顺序线性栈的定义" tabindex="-1"><a class="header-anchor" href="#顺序线性栈的定义" aria-hidden="true">#</a> 顺序线性栈的定义</h2><p>顾名思义，就是使用顺序线性表来实现栈的功能。</p><p>结构体定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">seqStack</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> MAXNUM<span class="token punctuation">;</span>
  <span class="token keyword">int</span> top<span class="token punctuation">;</span>
  DataType <span class="token operator">*</span>element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">seqStack</span><span class="token operator">*</span> PseqStack<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="顺序线性栈的基本操作与实现" tabindex="-1"><a class="header-anchor" href="#顺序线性栈的基本操作与实现" aria-hidden="true">#</a> 顺序线性栈的基本操作与实现</h2><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h3><p><strong>实现思路</strong>：</p><p><strong>源代码</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PseqStack <span class="token function">createNullStack_seq</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> m <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    PseqStack stack <span class="token operator">=</span> <span class="token punctuation">(</span>PseqStack<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seqStack</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>MAXNUM <span class="token operator">=</span> m<span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>element <span class="token operator">=</span> <span class="token punctuation">(</span>DataType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DataType<span class="token punctuation">)</span> <span class="token operator">*</span> stack<span class="token operator">-&gt;</span>MAXNUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时间复杂度</strong>：</p><p><strong>空间复杂度</strong>：</p><h3 id="入栈" tabindex="-1"><a class="header-anchor" href="#入栈" aria-hidden="true">#</a> 入栈</h3><p><strong>实现思路</strong>：</p><p><strong>源代码</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">isNullStack_seq</span><span class="token punctuation">(</span>PseqStack L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>L <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> L<span class="token operator">-&gt;</span>top <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//第三关 </span>
<span class="token keyword">int</span> <span class="token function">isFullStack_seq</span><span class="token punctuation">(</span>PseqStack L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> L<span class="token operator">-&gt;</span>top <span class="token operator">==</span> L<span class="token operator">-&gt;</span>MAXNUM <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//第四关</span>
<span class="token keyword">int</span> <span class="token function">push_seq</span><span class="token punctuation">(</span>PseqStack L <span class="token punctuation">,</span>DataType x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isNullStack_seq</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">isFullStack_seq</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      L<span class="token operator">-&gt;</span>element<span class="token punctuation">[</span>L<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
      L<span class="token operator">-&gt;</span>top<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时间复杂度</strong>：</p><p><strong>空间复杂度</strong>：</p><h3 id="出栈" tabindex="-1"><a class="header-anchor" href="#出栈" aria-hidden="true">#</a> 出栈</h3><p><strong>实现思路</strong>：</p><p><strong>源代码</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DataType <span class="token function">pop_seq</span><span class="token punctuation">(</span>PseqStack L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>top<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>element<span class="token punctuation">[</span>L<span class="token operator">-&gt;</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    L<span class="token operator">-&gt;</span>top<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时间复杂度</strong>：</p><p><strong>空间复杂度</strong>：</p><h3 id="读取栈顶元素" tabindex="-1"><a class="header-anchor" href="#读取栈顶元素" aria-hidden="true">#</a> 读取栈顶元素</h3><p><strong>实现思路</strong>：</p><p><strong>源代码</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DataType <span class="token function">top_seq</span><span class="token punctuation">(</span>PseqStack L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isNullStack_seq</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> L<span class="token operator">-&gt;</span>element<span class="token punctuation">[</span>L<span class="token operator">-&gt;</span>top <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时间复杂度</strong>：</p><p><strong>空间复杂度</strong>：</p><h3 id="销毁栈" tabindex="-1"><a class="header-anchor" href="#销毁栈" aria-hidden="true">#</a> 销毁栈</h3><p><strong>实现思路</strong>：</p><p><strong>源代码</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">destroystack_seq</span><span class="token punctuation">(</span>PseqStack L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isNullStack_seq</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> L<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时间复杂度</strong>：</p><p><strong>空间复杂度</strong>：</p><h2 id="顺序线性栈的优缺点" tabindex="-1"><a class="header-anchor" href="#顺序线性栈的优缺点" aria-hidden="true">#</a> 顺序线性栈的优缺点</h2><p><strong>优点</strong>：</p><p><strong>缺点</strong>：</p>`,40),o=[e];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","StackBasedonSequentialLinearList.html.vue"]]);export{u as default};
