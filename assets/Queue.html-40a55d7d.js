import{_ as i,W as u,X as r,$ as p,a2 as a,a1 as l,Y as n,Z as s,C as d}from"./framework-68a75bb9.js";const k="/images/DataStructuresAndAlgorithms/Queue.png",m="/images/DataStructuresAndAlgorithms/CircularQueue.png",v={},b=l('<p>队列简称队，也是一种操作受限的线性表，只允许在表的一端进行插入，而在另一端进行删除。我们称向队列中插入元素为<strong>入队</strong>，从队列中删除元素为<strong>出队</strong>或<strong>离队</strong>。</p><p>对于队列有以下三个概念：</p><ol><li>队首：允许删除的一端，又称队头。</li><li>队尾：允许插入的一端。</li><li>空队列：不含任何元素的空表。</li></ol><div class="hint-container tip"><p class="hint-container-title">考研中可直接使用的栈的基本操作</p><ol><li>InitQueue(&amp;Q): 初始化队列</li><li>QueueEmpty(Q): 判队列空</li><li>EnQueue(&amp;Q, x): 入队</li><li>DeQueue(&amp;Q, &amp;x): 出队</li><li>GetHead(Q, &amp;x): 读队首元素</li></ol></div><p>队列的操作特性是<strong>先进先出</strong>。</p><h2 id="队列的顺序存储" tabindex="-1"><a class="header-anchor" href="#队列的顺序存储" aria-hidden="true">#</a> 队列的顺序存储</h2><p>如图所示：</p><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>结构定义代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token punctuation">{</span> MAX_SIZE <span class="token operator">=</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ElemType data<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
    <span class="token comment">// int tag; // 视情况使用</span>
    <span class="token comment">// int size; // 视情况使用</span>
<span class="token punctuation">}</span> SqQueue<span class="token punctuation">,</span> <span class="token operator">*</span>PSqQueue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始时，<code>Q.head == Q.tail == 0</code>。 入队：队不满时，先在队尾插入元素，后将队尾指针后移一个单位。 出队：队不空时，先取队首元素，再将队首指针后移一个单位。</p><h3 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题" aria-hidden="true">#</a> 存在的问题</h3><p>如果我们就使用上面的队列进行一系列操作后，tail指针指向了表的最后一个元素。这时即使队列未满，我们仍可发现我们无法按照上面的思路继续进行插入（发生了“上溢出”，而这个情况的溢出不是真正的溢出，故而是一种“假溢出”）。因此为了解决这个问题，循环队列应运而生。</p><h2 id="队列的顺序存储变种——循环队列" tabindex="-1"><a class="header-anchor" href="#队列的顺序存储变种——循环队列" aria-hidden="true">#</a> 队列的顺序存储变种——循环队列</h2><p>把存储队列元素的表从逻辑上视为一个环，将顺序队列臆造为一个环状的空间，我们称之为循环队列。当队首指针<code>Q.head == MAX_SIZE-1</code>时，再前进一个位置就自动归0，而要实现这个效果，我们可以利用求余运算来实现。</p><p>如图所示：</p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>初始时：<code>Q.head == Q.tail == 0</code>。 队首指针后移一个位置：<code>Q.head = (Q.head + 1) % MAX_SIZE</code>。 队尾指针后移一个位置：<code>Q.tail = (Q.tail + 1) % MAX_SIZE</code>。 队列长度：<code>(Q.tail - Q.head + MAX_SIZE) % MAX_SIZE</code>。</p><div class="hint-container tip"><p class="hint-container-title">队列判空</p><p>如果我们使用<code>Q.head == Q.tail</code>作为队列判空条件的话，当入队速度快过出队速度的时候，队尾指针会很快赶上队首指针，这时候会发现队满的情况也是满足<code>Q.head == Q.tail</code>条件的，因此为了区分队空还是队满，我们通常有三种处理方式：</p><ol><li>牺牲一个单元来区分队空与队满：这是一种较为普遍的做法：入队时少用一个队列单元，约定以“队首指针在队尾指针的下一位置”作为队满的标志。 队满条件：<code>(Q.tail + 1) % MAX_SIZE == Q.head</code>。 队空条件：<code>Q.head == Q.tail</code>。</li><li>类型中增设表示元素个数的数据成员： 队满条件：<code>Q.size == MAX_SIZE</code>。 队空条件：<code>Q.size == 0</code>。</li><li>类型中增设<code>tag</code>数据成员：若因出队导致<code>Q.head == Q.tail</code>，则为队空，<code>tag</code>赋值为<code>0</code>；若因入队导致<code>Q.head == Q.tail</code>，则为队满，<code>tag</code>赋值为<code>1</code>。 队满条件：<code>Q.tag == 1</code>。 队空条件：<code>Q.tag == 0</code>。</li></ol></div><h3 id="结构定义" tabindex="-1"><a class="header-anchor" href="#结构定义" aria-hidden="true">#</a> 结构定义</h3>',20),h=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"int"),s(" ElemType"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token punctuation"},"{"),s(" MAX_SIZE "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"50"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token punctuation"},"{"),s(`
    ElemType data`),n("span",{class:"token punctuation"},"["),s("MAX_SIZE"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" head"),n("span",{class:"token punctuation"},","),s(" tail"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(" SqQueue"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"*"),s("PSqQueue"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"int"),s(" ElemType"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token punctuation"},"{"),s(" MAX_SIZE "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"50"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token punctuation"},"{"),s(`
    ElemType data`),n("span",{class:"token punctuation"},"["),s("MAX_SIZE"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" head"),n("span",{class:"token punctuation"},","),s(" tail"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" size"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(" SqQueue"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"*"),s("PSqQueue"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"int"),s(" ElemType"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token punctuation"},"{"),s(" MAX_SIZE "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"50"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token punctuation"},"{"),s(`
    ElemType data`),n("span",{class:"token punctuation"},"["),s("MAX_SIZE"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" head"),n("span",{class:"token punctuation"},","),s(" tail"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" tag"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(" SqQueue"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"*"),s("PSqQueue"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("h3",{id:"初始化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初始化","aria-hidden":"true"},"#"),s(" 初始化")],-1),_=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"InitQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"="),s(" Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"InitQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"="),s(" Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("size "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"InitQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"="),s(" Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("tag "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("h3",{id:"队列判空",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#队列判空","aria-hidden":"true"},"#"),s(" 队列判空")],-1),E=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"IsEmptyQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" Q"),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"=="),s(" Q"),n("span",{class:"token operator"},"->"),s("head"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"IsEmptyQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" Q"),n("span",{class:"token operator"},"->"),s("size "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"IsEmptyQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"!"),s("Q"),n("span",{class:"token operator"},"->"),s("tag "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"=="),s(" Q"),n("span",{class:"token operator"},"->"),s("tail"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("h3",{id:"队列判满",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#队列判满","aria-hidden":"true"},"#"),s(" 队列判满")],-1),q=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"IsFullQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"%"),s(" MAX_SIZE "),n("span",{class:"token operator"},"=="),s(" Q"),n("span",{class:"token operator"},"->"),s("head"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"IsFullQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" Q"),n("span",{class:"token operator"},"->"),s("size "),n("span",{class:"token operator"},"=="),s(" MAX_SIZE"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),X=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"IsFullQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" Q"),n("span",{class:"token operator"},"->"),s("tag "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"=="),s(" Q"),n("span",{class:"token operator"},"->"),s("tail"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Z=n("h3",{id:"入队",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#入队","aria-hidden":"true"},"#"),s(" 入队")],-1),M=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"EnSqQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q "),n("span",{class:"token punctuation"},","),s("ElemType x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(),n("span",{class:"token function"},"IsFullQueue"),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),s("Q"),n("span",{class:"token operator"},"->"),s("tail"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" x"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"%"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"EnSqQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q "),n("span",{class:"token punctuation"},","),s("ElemType x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(),n("span",{class:"token function"},"IsFullQueue"),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),s("Q"),n("span",{class:"token operator"},"->"),s("tail"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" x"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"%"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("size "),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"EnSqQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q "),n("span",{class:"token punctuation"},","),s("ElemType x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(),n("span",{class:"token function"},"IsFullQueue"),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),s("Q"),n("span",{class:"token operator"},"->"),s("tail"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" x"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"%"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("tag "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"=="),s(" Q"),n("span",{class:"token operator"},"->"),s("head"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("h3",{id:"出队",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#出队","aria-hidden":"true"},"#"),s(" 出队")],-1),z=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[s("ElemType "),n("span",{class:"token function"},"DeSqQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(),n("span",{class:"token function"},"IsEmptyQueue"),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    ElemType tmp `),n("span",{class:"token operator"},"="),s(" Q"),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),s("Q"),n("span",{class:"token operator"},"->"),s("head"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"%"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" tmp"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[s("ElemType "),n("span",{class:"token function"},"DeSqQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(),n("span",{class:"token function"},"IsEmptyQueue"),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    ElemType tmp `),n("span",{class:"token operator"},"="),s(" Q"),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),s("Q"),n("span",{class:"token operator"},"->"),s("head"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"%"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("size "),n("span",{class:"token operator"},"-="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" tmp"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[s("ElemType "),n("span",{class:"token function"},"DeSqQueue"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(),n("span",{class:"token function"},"IsEmptyQueue"),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    ElemType tmp `),n("span",{class:"token operator"},"="),s(" Q"),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),s("Q"),n("span",{class:"token operator"},"->"),s("head"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"%"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},";"),s(`
    Q`),n("span",{class:"token operator"},"->"),s("tag "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"!="),s(" Q"),n("span",{class:"token operator"},"->"),s("head"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" tmp"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=l(`<h3 id="读取" tabindex="-1"><a class="header-anchor" href="#读取" aria-hidden="true">#</a> 读取</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ElemType <span class="token function">GetHead</span><span class="token punctuation">(</span>PseqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">IsEmptyQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>Q<span class="token operator">-&gt;</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取队列长度" tabindex="-1"><a class="header-anchor" href="#获取队列长度" aria-hidden="true">#</a> 获取队列长度</h3>`,3),G=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[s("ElemType "),n("span",{class:"token function"},"GetLength"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"-"),s(" Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"+"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"%"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[s("ElemType "),n("span",{class:"token function"},"GetLength"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" Q"),n("span",{class:"token operator"},"->"),s("size"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[s("ElemType "),n("span",{class:"token function"},"GetLength"),n("span",{class:"token punctuation"},"("),s("PSqQueue Q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"IsFullQueue"),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(" MAX_SIZE "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s("Q"),n("span",{class:"token operator"},"->"),s("tail "),n("span",{class:"token operator"},"-"),s(" Q"),n("span",{class:"token operator"},"->"),s("head "),n("span",{class:"token operator"},"+"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"%"),s(" MAX_SIZE"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=l(`<h2 id="队列的链式存储" tabindex="-1"><a class="header-anchor" href="#队列的链式存储" aria-hidden="true">#</a> 队列的链式存储</h2><p>队列的链式表示称为链队列。它实际上是一个同时带有队首指针和队尾指针的单链表，其中头指针指向队首结点，为指针指向队尾结点。</p><p>结构定义为：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">{</span>
    ElemType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> LinkNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    LinkNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token operator">*</span> LinkQueue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当<code>Q.head == NULL</code>且<code>Q.tail == NULL</code>时，链队列为空。出队时，首先判断队列是否为空，若不空则取出队首元素并将其从链表中删除，并让<code>Q.head</code>指向下一个结点（若出队时的结点为链表中最后一个结点，则需要让<code>Q.head</code>和<code>Q.tail</code>都置为<code>NULL</code>）；入队时，建立一个新结点并初始化，然后将其插入到链表的尾部，并让<code>Q.tail</code>指向这个结点（若入队时的结点为链表中的第一个结点，则需要让<code>Q.head</code>和<code>Q.tail</code>都指向这个结点）。</p></blockquote><p>如果按照这个方式来写的话插入和删除都需要单独考虑队列为空的情况，操作上有所不同，因此一般将链式队列设计成带有头结点的单链表，从而达成统一删除和插入操作的目的。</p><h3 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1" aria-hidden="true">#</a> 初始化</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">InitLQueue</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Q<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="队列判空-1" tabindex="-1"><a class="header-anchor" href="#队列判空-1" aria-hidden="true">#</a> 队列判空</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">IsEmptyLQueue</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> Q<span class="token operator">-&gt;</span>head <span class="token operator">==</span> Q<span class="token operator">-&gt;</span>tail<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="入队-1" tabindex="-1"><a class="header-anchor" href="#入队-1" aria-hidden="true">#</a> 入队</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">EnLQueue</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    LinkNode<span class="token operator">*</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    Q<span class="token operator">-&gt;</span>tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>
    Q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="出队-1" tabindex="-1"><a class="header-anchor" href="#出队-1" aria-hidden="true">#</a> 出队</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">DeLQueue</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">,</span> ElemType<span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">IsEmptyLQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    LinkNode<span class="token operator">*</span> p <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token operator">*</span>x <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    Q<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>tail <span class="token operator">==</span> p<span class="token punctuation">)</span> Q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="队列的拓展——双端队列" tabindex="-1"><a class="header-anchor" href="#队列的拓展——双端队列" aria-hidden="true">#</a> 队列的拓展——双端队列</h2><p>双端队列是指允许两端都可以进行入队和出队操作的队列，其元素的逻辑结构仍然是线性结构。我们将队列的两端分别称为前端和后端。</p><p>在双端队列入队时前端进的元素排列在队列中后端进的元素前面，后端进的元素排列在队列中前端进的元素后面；在上端队列出队时无论前端还是后端出队，先出的元素排列在后出的元素前面。</p><p>若给双端队列加以限制，我们又可以得到两种双端队列：</p><ol><li>输出受限的双端队列：允许在一端进行插入和删除，但在另一端<strong>只</strong>允许插入的双端队列称为输出受限的双端队列。</li><li>输入受限的双端队列：允许在一端进行插入和删除，但在另一端<strong>只</strong>允许删除的双端队列称为输入受限的双端队列。若限定双端队列从某个端点插入的元素只能从该端点删除，则该双端队列就蜕变为两个栈底相邻接的栈。</li></ol>`,19);function H(W,Y){const c=d("CodeTabs");return u(),r("div",null,[b,p(c,{id:"117",data:[{title:"方式一"},{title:"方式二"},{title:"方式三"}],"tab-id":"methods"},{tab0:a(({title:e,value:t,isActive:o})=>[h]),tab1:a(({title:e,value:t,isActive:o})=>[Q]),tab2:a(({title:e,value:t,isActive:o})=>[g]),_:1}),y,p(c,{id:"131",data:[{title:"方式一"},{title:"方式二"},{title:"方式三"}],"tab-id":"methods"},{tab0:a(({title:e,value:t,isActive:o})=>[_]),tab1:a(({title:e,value:t,isActive:o})=>[f]),tab2:a(({title:e,value:t,isActive:o})=>[w]),_:1}),x,p(c,{id:"145",data:[{title:"方式一"},{title:"方式二"},{title:"方式三"}],"tab-id":"methods"},{tab0:a(({title:e,value:t,isActive:o})=>[E]),tab1:a(({title:e,value:t,isActive:o})=>[S]),tab2:a(({title:e,value:t,isActive:o})=>[A]),_:1}),I,p(c,{id:"159",data:[{title:"方式一"},{title:"方式二"},{title:"方式三"}],"tab-id":"methods"},{tab0:a(({title:e,value:t,isActive:o})=>[q]),tab1:a(({title:e,value:t,isActive:o})=>[L]),tab2:a(({title:e,value:t,isActive:o})=>[X]),_:1}),Z,p(c,{id:"173",data:[{title:"方式一"},{title:"方式二"},{title:"方式三"}],"tab-id":"methods"},{tab0:a(({title:e,value:t,isActive:o})=>[M]),tab1:a(({title:e,value:t,isActive:o})=>[T]),tab2:a(({title:e,value:t,isActive:o})=>[P]),_:1}),N,p(c,{id:"187",data:[{title:"方式一"},{title:"方式二"},{title:"方式三"}],"tab-id":"methods"},{tab0:a(({title:e,value:t,isActive:o})=>[z]),tab1:a(({title:e,value:t,isActive:o})=>[D]),tab2:a(({title:e,value:t,isActive:o})=>[F]),_:1}),C,p(c,{id:"205",data:[{title:"方式一"},{title:"方式二"},{title:"方式三"}],"tab-id":"methods"},{tab0:a(({title:e,value:t,isActive:o})=>[G]),tab1:a(({title:e,value:t,isActive:o})=>[U]),tab2:a(({title:e,value:t,isActive:o})=>[V]),_:1}),B])}const j=i(v,[["render",H],["__file","Queue.html.vue"]]);export{j as default};
