import{_ as a,W as i,X as o,Y as e,Z as s,$ as d,a1 as l,C as t}from"./framework-68a75bb9.js";const r="/images/2021-05-07_14-28.png",u={},c=e("h1",{id:"blog-building",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#blog-building","aria-hidden":"true"},"#"),s(" Blog Building")],-1),m={href:"https://wxwoo.top/2019/05/15/hexo-mathjax-renderer-optimization/",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"搭建博客的原因¿",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#搭建博客的原因¿","aria-hidden":"true"},"#"),s(" 搭建博客的原因¿")],-1),p=e("p",null,[s("自从换了方向之后，发现我需要写的公式数量急剧增长，很多时候我都发现使用特殊符号是远不能满足这一需求的，比如如果我想打$$\\int_a"),e("sup",{n:"",N_i:""},"b$$、$$\\frac{1}{N}\\sum_{i=0}"),s("$$等等就非常难顶。。。")],-1),h=l(`<h2 id="怎么搭建的博客¿" tabindex="-1"><a class="header-anchor" href="#怎么搭建的博客¿" aria-hidden="true">#</a> 怎么搭建的博客¿</h2><h3 id="初始安装" tabindex="-1"><a class="header-anchor" href="#初始安装" aria-hidden="true">#</a> 初始安装</h3><p>首先需要安装好hexo以及其所需要的环境Node.js和包管理器npm，我选择的主题是fluid,简单轻便雅观，最重要的是原生支持LaTeX渲染！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> nodejs <span class="token function">npm</span>
<span class="token builtin class-name">cd</span> ~/your_blog
<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli <span class="token parameter variable">--save</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
hexo init your_blog
<span class="token builtin class-name">cd</span> ~/your_blog/themes
<span class="token function">mkdir</span> fluid <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> fluid
<span class="token function">git</span> clone https://github.com/fluid-dev/hexo-theme-fluid.git
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
<span class="token function">npm</span> <span class="token function">install</span>
hexo cl <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候你进入<a href="localhost:4000">你的博客</a>就可以看到你的网站啦！</p><h3 id="ssh链接配置" tabindex="-1"><a class="header-anchor" href="#ssh链接配置" aria-hidden="true">#</a> SSH链接配置</h3><p>接下来我们要创建SSH链接。<em><strong>「注意：此处的前提条件是你已经拥有GitHub账户且已经建好&lt;用户名&gt;.github.io仓库。」</strong></em></p><p>在控制台这里输入<code>ssh-keygen -t rsa -C &quot;Your@email.com&quot;</code>，其中<code>Your@email.com</code>是你的邮箱，可以拿注册GitHub的邮箱。然后执行<code>cat ~/.ssh/id_rsa.pub</code>来查看SSH key。别忘了复制好ssh-rsa 后面的那一串字符串。</p><p>接下来进入你的GitHub，点击你的右上角的用户头像并点击Settings，再选择SSH and GPG keys，点击New SSH key创建一个新的SSH链接，然后在Key这一文本框里粘贴你刚才复制的东西，最后点击Add SSH key。</p><p>输入<code>ssh -T git@github.com</code>即可测试是否链接成功。</p><p>如果看到它在向你打招呼，那就是连接成功了。</p><h2 id="遇到了什么问题-怎么解决‽" tabindex="-1"><a class="header-anchor" href="#遇到了什么问题-怎么解决‽" aria-hidden="true">#</a> 遇到了什么问题？怎么解决‽</h2><h3 id="md渲染问题" tabindex="-1"><a class="header-anchor" href="#md渲染问题" aria-hidden="true">#</a> Md渲染问题</h3><p>我在执行<code>hexo g</code>时遇到了如下报错：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INFO  Validating config
INFO  Start processing
INFO  [Fluid] 读取 _config.yml 中 theme_config 配置项覆盖配置
FATAL {
  err: Template render error: (unknown path)
    Error: expected end of comment, got end of file
      at Object._prettifyError (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/nunjucks/src/lib.js:36:11)
      at Template.render (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/nunjucks/src/environment.js:538:21)
      at Environment.renderString (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/nunjucks/src/environment.js:380:17)
      at /home/breeze_shane/Mydata/GitHub_Blog/node_modules/hexo/lib/extend/tag.js:236:16
      at tryCatcher (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/util.js:16:23)
      at Function.Promise.fromNode.Promise.fromCallback (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:209:30)
      at Tag.render (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/hexo/lib/extend/tag.js:235:20)
      at Object.onRenderEnd (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/hexo/lib/hexo/post.js:297:22)
      at /home/breeze_shane/Mydata/GitHub_Blog/node_modules/hexo/lib/hexo/render.js:79:21
      at tryCatcher (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/util.js:16:23)
      at Promise._settlePromiseFromHandler (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:547:31)
      at Promise._settlePromise (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:604:18)
      at Promise._settlePromise0 (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:649:10)
      at Promise._settlePromises (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:729:18)
      at _drainQueueStep (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/async.js:93:12)
      at _drainQueue (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/async.js:86:9)
      at Async._drainQueues (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/async.js:102:5)
      at Immediate.Async.drainQueues (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/async.js:15:14)
      at processImmediate (node:internal/timers:464:21) {
    cause: Template render error: (unknown path)
      Error: expected end of comment, got end of file
        at Object._prettifyError (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/nunjucks/src/lib.js:36:11)
        at Template.render (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/nunjucks/src/environment.js:538:21)
        at Environment.renderString (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/nunjucks/src/environment.js:380:17)
        at /home/breeze_shane/Mydata/GitHub_Blog/node_modules/hexo/lib/extend/tag.js:236:16
        at tryCatcher (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/util.js:16:23)
        at Function.Promise.fromNode.Promise.fromCallback (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:209:30)
        at Tag.render (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/hexo/lib/extend/tag.js:235:20)
        at Object.onRenderEnd (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/hexo/lib/hexo/post.js:297:22)
        at /home/breeze_shane/Mydata/GitHub_Blog/node_modules/hexo/lib/hexo/render.js:79:21
        at tryCatcher (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/util.js:16:23)
        at Promise._settlePromiseFromHandler (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:547:31)
        at Promise._settlePromise (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:604:18)
        at Promise._settlePromise0 (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:649:10)
        at Promise._settlePromises (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/promise.js:729:18)
        at _drainQueueStep (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/async.js:93:12)
        at _drainQueue (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/async.js:86:9)
        at Async._drainQueues (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/async.js:102:5)
        at Immediate.Async.drainQueues (/home/breeze_shane/Mydata/GitHub_Blog/node_modules/bluebird/js/release/async.js:15:14)
        at processImmediate (node:internal/timers:464:21),
    isOperational: true
  }
} Something&#39;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过查询资料，了解到这其实是渲染md文件的问题，需要修改一下渲染器的代码来解决渲染失败的问题。</p><p>首先需要打开博客根目录下的node_modules/nunjucks/src/lexer.js，打开时会看到如下代码，我们需要修改一下这个红框中的内容：</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>改成如下形式即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token constant">VARIABLE_START</span> <span class="token operator">=</span> <span class="token string">&#39;{$&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">VARIABLE_END</span> <span class="token operator">=</span> <span class="token string">&#39;$}&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">COMMENT_START</span> <span class="token operator">=</span> <span class="token string">&#39;{##&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">COMMENT_END</span> <span class="token operator">=</span> <span class="token string">&#39;##}&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过缺点就是每次更新numjucks的话这个文件会被还原，需要再次修改。</p><h3 id="如何将pdf挂在文章上" tabindex="-1"><a class="header-anchor" href="#如何将pdf挂在文章上" aria-hidden="true">#</a> 如何将pdf挂在文章上？</h3><p>一种做法是安装hexo-pdf插件「执行<code>npm i --save hexo-pdf</code>」，然后在文章内要插入的位置中写<code>{% pdf YOURPDFURL %}</code>即可。</p><p>另一种做法是使用HTML语法，不过未经过本人亲自测试。</p><ol><li><p>将_config.yml中的post_asset_folder选项置为true。</p></li><li><p>在文章中要插入的位置中写<code>&lt;object data=&quot;YOURPDFURL&quot; type=&quot;application/pdf&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;</code></p><blockquote><p>这里不一定非用object标签，embed、iframe标签也一样；另外如果不能接受pdf的显示方式的话，可以自己手动调整height的参数值。</p></blockquote></li></ol><p>「注」：以上两种做法的YOURPDFURL就要替换成你要放的pdf文件的位置，可以是链接到其他网站的超链接，也可以是本地的相对路径。</p><h3 id="如何绘制思维导图" tabindex="-1"><a class="header-anchor" href="#如何绘制思维导图" aria-hidden="true">#</a> 如何绘制思维导图？</h3><h2 id="¿要注意哪些问题" tabindex="-1"><a class="header-anchor" href="#¿要注意哪些问题" aria-hidden="true">#</a> ¿要注意哪些问题？</h2><ul><li>public文件夹是执行<code>hexo g</code>后生成的，这是为了后面执行<code>hexo d</code>时做的准备，你在_config.yml文件中写到的所有/img/最后都会链接到这个文件夹。如果你希望显示自己的图片的话一种做法是将这些图片复制到/img/文件夹下。</li><li>执行<code>hexo clean</code>的时候会删除博客根目录下的public整个文件夹，这包括一切你存放在img文件夹下的所有图片，因此如果你经常执行这个语句的花需要提前做好相关备份。</li><li>如果不希望总是做这些重复性工作，做法之一是写脚本，另一种做法便是在source文件夹下创建任意名称的文件夹，然后在这个新建的文件夹里存放图片，执行<code>hexo g</code>后会自动在public文件夹下生成相同文件夹（盲猜是直接复制过去），接下来你就可以在文档这里直接链接到这个文件夹的图片了。</li></ul>`,29);function _(v,g){const n=t("ExternalLinkIcon");return i(),o("div",null,[c,e("blockquote",null,[e("p",null,[s("参考："),e("a",m,[s("hexo中的mathjax数学公式渲染优化"),d(n)])])]),b,p,h])}const k=a(u,[["render",_],["__file","BlogBuilding.html.vue"]]);export{k as default};
