import{_ as n,W as s,X as a,a1 as e}from"./framework-68a75bb9.js";const t={},o=e(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>因为学校布置了一个在openEuler上的综合大作业，我和比较多的同学们选择了部署安装深度学习的主题，但同学们苦于配置环境非常繁琐。我就产生了编写全自动化Shell部署安装脚本的想法，特此一记。</p><h2 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路" aria-hidden="true">#</a> 实现思路</h2><ol><li>下载anaconda</li><li>自动化交互并安装anaconda</li><li>自动配置conda和pip</li><li>自动创建虚拟环境</li><li>自动拉取git仓库项目</li><li>自动安装requirements</li><li>自动运行项目「可选」</li></ol><h2 id="分步具体实现" tabindex="-1"><a class="header-anchor" href="#分步具体实现" aria-hidden="true">#</a> 分步具体实现</h2><h3 id="下载anaconda" tabindex="-1"><a class="header-anchor" href="#下载anaconda" aria-hidden="true">#</a> 下载Anaconda</h3><p>这里实现非常简单，调用wget即可，链接从官网获取：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-XXXX.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意这里的XXXX是需要你指定类型的，一般情况下系统是使用x86架构的，写<code>x86_64</code>即可，但openEuler实验课上我们选择的系统是ARM架构，因此要写<code>aarch64</code>。</p><h3 id="自动化交互并安装anaconda" tabindex="-1"><a class="header-anchor" href="#自动化交互并安装anaconda" aria-hidden="true">#</a> 自动化交互并安装anaconda</h3><p>通过shell实现自动化交互比较麻烦，我搜索了好长时间才知道应该如何解决，</p><p>起初我是写成这样的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/bash</span>
<span class="token builtin class-name">echo</span> <span class="token string">$&#39;<span class="token entity" title="\\003">\\003</span>&#39;</span> <span class="token operator">|</span> <span class="token builtin class-name">echo</span> <span class="token variable">$KEYCODE_ENTER</span> <span class="token operator">|</span> <span class="token function">sh</span> ./Anaconda3-2021.11-Linux-XXXX.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显失败了，仔细想想不应该写成这样，这意思是：将<kbd>Ctrl</kbd>+<kbd>C</kbd>对应的SIGINT信号送入命令<code>echo $KEYCODE_ENTER | sh ./Anaconda3-2021.11-Linux-XXXX.sh</code>，就是中断该命令进行。</p><p>后来我的实现思路是尝试将输入的内容发送到进程中，于是在纠结如何获取进程，折腾了好久才发现，实际上在我不修改下载来的Shell Installer的话，我这样做是送不进去的。</p><p>之后我查到了有效的方法，写成这样即可按照预期进行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
	<span class="token builtin class-name">echo</span> <span class="token variable">\${KEYCODE_ENTER}</span><span class="token punctuation">;</span>
	<span class="token function">kill</span> <span class="token parameter variable">-SIGINT</span> <span class="token environment constant">$PPID</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">echo</span> <span class="token variable">\${KEYCODE_ENTER}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sh</span> ./Anaconda3-2021.11-Linux-XXXX.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，当我执行的时候我就发现不论如何，中间出现的用户条例总是会弹出来，而且即使我先后尝试添加语句来输入SIGINT信号也好，输入Q也罢，都不能自动退出阅读用户条例的模式，搜索许久无果后我最终决定看安装脚本的源码，最后我发现，在这个脚本中有这样的语句：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;<span class="token variable">$pager</span>&quot;</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF
......
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时我才明白，我应该将问题放在如何阻止他向<code>$pager</code>写入内容，但搜索了许久也没有能满足我需求的指令，起先是觉得pager应该是个系统环境变量，但经过<code>env</code>查看之后也没能找到，虽然看到了<code>PAGER</code>，但他俩毕竟有区别，即使是我尝试创建变量$pager也于事无补，始终都不能解决问题。</p><p>于是我翻了又翻源代码，注意到这里：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">pager</span><span class="token operator">=</span><span class="token string">&quot;cat&quot;</span>
<span class="token keyword">if</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> <span class="token string">&quot;more&quot;</span> <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
<span class="token assign-left variable">pager</span><span class="token operator">=</span><span class="token string">&quot;more&quot;</span>
<span class="token keyword">fi</span>
<span class="token string">&quot;<span class="token variable">$pager</span>&quot;</span> <span class="token operator">&lt;&lt;</span>EOF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我将问题中心转移在cat身上了，我查过cat的相关文档，但看了许久也没发现它有任何相关参数。</p><blockquote><p><strong>题外话</strong>：我搜到过systemctl的相应解决方案，是在输入<code>systemctl stats</code>时避免出现分页器问题，这个的解决方案也简单，就是执行<code>export SYSTEMD_PAGER=cat </code>即可，原因是这个：</p><blockquote><p><code>$SYSTEMD_PAGER</code> Pager to use when <code>--no-pager</code> is not given; overrides <code>$PAGER</code>. If neither <code>$SYSTEMD_PAGER</code> nor <code>$PAGER</code> are set, a set of well-known pager implementations are tried in turn, including <code>less</code>(1) and <code>more</code>(1), until one is found. If no pager implementation is discovered no pager is invoked. Setting this environment variable to an empty string or the value &quot;<code>cat</code>&quot; is equivalent to passing <code>--no-pager</code>.</p></blockquote><p>man page表述已经很清晰了，<code>$SYSTEMD_PAGER</code>和<code>$PAGER</code>都不存在的时候，就会尝试从<code>less</code>和<code>more</code>中加载可用的软件。 因此如果不想使用分页器就可以执行<code>export SYSTEMD_PAGER=cat</code>，这样当你再次输入<code>systemctl stats</code>时它也不会出现分页器了。</p></blockquote><p>后来就觉得，可能问题中心还没有找到，我就又从遇到的第一个问题开始分析，从头整理思绪后，开始觉得，分页器终归是分页器，问题应该是在于它的Here Documentation内写了太多的文字信息，因此当它输出的时候即使原本配置是不用分页器的，在这样的情况下也不得不使用分页器，于是我认为应该将问题中心放在这一大段文字上。</p><p>于是我自然而然地想到了重定向问题。猛地发现，我可以使用重定向将这一大段文字清空掉，于是我写成了如下形式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
	<span class="token builtin class-name">echo</span> <span class="token variable">\${KEYCODE_ENTER}</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">echo</span> <span class="token variable">\${KEYCODE_ENTER}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sh</span> ./Anaconda3-2021.11-Linux-XXXX.sh <span class="token operator">&gt;</span> /dev/null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但后来我发现，这样是直接将所有输出全部丢弃掉了，有些事是还想回溯一下历史，那应该如何做？</p><p>在我进一步深入学习重定向之后，了解到了如下内容：</p><blockquote><p>在shell脚本中，默认情况下，总是有三个文件处于打开状态，标准输入、标准输出、标准错误，它们分别对应的文件描述符是0，1，2 。</p><p><code>&gt;</code>默认为标准输出重定向，与<code>1&gt;</code>相同。 <code>2&gt;&amp;1</code>是输出标准错误并重定向到标准输出。</p><p><code>&amp;&gt;file</code>是把标准输出和标准错误都重定向到文件file中。</p><p><code>/dev/null</code>是一个特殊的文件，所有传给它的东西都会被丢弃掉。</p><p><code>1&gt;&amp;2</code>指的是将正确返回值传递给2输出通道，<code>&amp;2</code>表示2输出通道。</p><p><code>2&gt;&amp;1</code>指的是将错误返回值传递给1输出通道, 同样<code>&amp;1</code>表示1输出通道。</p></blockquote><p>结合以上的知识和我目前的需求，最后就暂时写成以下的样子：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
	<span class="token builtin class-name">echo</span> <span class="token variable">\${KEYCODE_ENTER}</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">echo</span> <span class="token variable">\${KEYCODE_ENTER}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sh</span> ./Anaconda3-2021.11-Linux-XXXX.sh <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>./Anaconda.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动配置conda和pip" tabindex="-1"><a class="header-anchor" href="#自动配置conda和pip" aria-hidden="true">#</a> 自动配置conda和pip</h3><p>前面的事做好的话，后面也不怎么难了，把常用的那些指令写上去就可以了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># conda change channels</span>
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/
conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span>
<span class="token comment"># cat /root/.condarc</span>

<span class="token comment"># pip change channels</span>
pip config <span class="token builtin class-name">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple/
pip config <span class="token builtin class-name">set</span> install.trusted-host mirrors.aliyun.com
<span class="token comment"># cat /root/.config/pip/pip.conf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动创建虚拟环境" tabindex="-1"><a class="header-anchor" href="#自动创建虚拟环境" aria-hidden="true">#</a> 自动创建虚拟环境</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> conda create <span class="token parameter variable">-n</span> OEDL <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自动拉取git仓库项目" tabindex="-1"><a class="header-anchor" href="#自动拉取git仓库项目" aria-hidden="true">#</a> 自动拉取git仓库项目</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://hub.fastgit.org/<span class="token operator">&lt;</span>USERNAME<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>REPO-NAME<span class="token operator">&gt;</span>.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自动安装requirements" tabindex="-1"><a class="header-anchor" href="#自动安装requirements" aria-hidden="true">#</a> 自动安装requirements</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自动运行项目「可选」" tabindex="-1"><a class="header-anchor" href="#自动运行项目「可选」" aria-hidden="true">#</a> 自动运行项目「可选」</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python YOUR_SCRIPT.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="强化与优化" tabindex="-1"><a class="header-anchor" href="#强化与优化" aria-hidden="true">#</a> 强化与优化</h2><p>将上述分布执行再优化一下，设置一些参数，增强其通用性。</p><p>在该脚本中，我增加了如下功能：</p><ol><li>判断文件是否已下载过，若存在则跳过下载；</li><li>给出选项供用户选择不同架构下的Anaconda；</li><li>提供帮助文档；</li><li>允许通过传送参数修改项目来源地和虚拟环境名称；</li></ol><h5 id="实现功能一" tabindex="-1"><a class="header-anchor" href="#实现功能一" aria-hidden="true">#</a> 实现功能一：</h5><p>基本思路就是判断文件是否存在，然后套用shell的if语法框架即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">&quot;./Anaconda3-2021.11-Linux-<span class="token variable">\${TYPE}</span>.sh&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token function">wget</span> https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-<span class="token variable">\${TYPE}</span>.sh
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>扩展：</strong></p><p>判断文件夹是否存在时将上段代码中<code>-f</code>改为<code>-d</code>即可；判断是否有执行权限则改为<code>-x</code>即可；判断变量是否有值则改为<code>-n</code>即可。</p><h5 id="实现功能二" tabindex="-1"><a class="header-anchor" href="#实现功能二" aria-hidden="true">#</a> 实现功能二：</h5><p>基本思路是shell分支语句的框架：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">read</span> TYPEID<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$TYPEID</span> <span class="token parameter variable">-eq</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;x86_64&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$TYPEID</span> <span class="token parameter variable">-eq</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;aarch64&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$TYPEID</span> <span class="token parameter variable">-eq</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;ppc64le&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$TYPEID</span> <span class="token parameter variable">-eq</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;s390x&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
	<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;Invalid type id.&quot;</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="实现功能三" tabindex="-1"><a class="header-anchor" href="#实现功能三" aria-hidden="true">#</a> 实现功能三：</h5><p>基本思路就是利用echo带有转义输出的控制<code>echo -e &quot;&lt;String&gt;\\n&quot;</code>。</p><h5 id="实现功能四" tabindex="-1"><a class="header-anchor" href="#实现功能四" aria-hidden="true">#</a> 实现功能四：</h5><p>基本思路是利用shell脚本中的特殊变量如<code>$1</code>、<code>$2</code>、<code>$3</code>等等，分别表示第一个参数、第二个参数、第三个参数，另外注意<code>$0</code>是表示程序名。该功能还利用shell变量的特殊替换结构而设置默认值。</p><blockquote><p>shell变量特殊替换结构：</p><p><code>\${var:-string}</code>：当变量var未定义或者值为空时，返回值为string的内容，否则返回变量的值。</p><p><code>\${var:+string}</code>：若变量var已赋值的话，其值才用string替换，否则不进行任何替换。</p><p><code>\${var:=string}</code>：若变量var未定义或者值为空时，在返回string的值的同时将string赋值给var。</p><p><code>\${var:?string}</code>：若变量var已赋值的话,正常输出var的值。否则将消息string送到标准错误输出（若此替换出现在Shell程序中，那么该程序将终止运行）</p><p><code>\${var:offset:length}</code>：从变量var中提取子串，这里offset和length可以是算术表达式。offset代表偏移量，从第几个字符开始提取，length是需要提取的字符串的个数。</p><p><code>\${#var}</code>：变量var的字符个数。</p><p><code>\${var#pattern}</code>和<code>\${var##pattern}</code>：去掉var中与pattern相匹配的部分，条件是var的开头与pattern相匹配。#与##的区别在于一个是最短匹配模式，一个是最长匹配模式。</p><p><code>\${var%pattern}</code>和<code>\${var%%pattern}</code>：与上例相似，但是从var的尾部和pattern相匹配，%与%%的区别与#与##一样。</p><p><code>\${var/pattern/string}</code> 和<code>\${var//pattern/string}</code>：进行变量内容的替换，把与pattern匹配的部分替换为string的内容。<code>/</code>与<code>//</code>的区别是<code>/</code>只进行一次匹配替换，而<code>//</code>可以进行多次匹配替换。</p><p>从网上看到的模式匹配记忆方法：</p><blockquote><p><code>#</code> 是去掉左边(在键盘上<code>#</code>在<code>$</code>之左边) <code>%</code> 是去掉右边(在键盘上<code>%</code>在<code>$</code>之右边) <code>#</code>和<code>%</code>中的单一符号是最小匹配，两个相同符号是最大匹配。</p></blockquote></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Variables</span>
<span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token variable">$1</span>
<span class="token assign-left variable">REPO</span><span class="token operator">=</span><span class="token variable">$2</span>
<span class="token assign-left variable">ENVNAME</span><span class="token operator">=</span><span class="token variable">$3</span>

<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>

<span class="token comment"># Create the virtual environment.</span>
<span class="token punctuation">{</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> conda create <span class="token parameter variable">-n</span> <span class="token variable">\${ENVNAME<span class="token operator">:-</span>&quot;OEDL&quot;}</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span>

<span class="token comment"># Activate the environment.</span>
conda activate <span class="token variable">\${ENVNAME}</span>

<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>

<span class="token comment"># Download the repo.</span>
<span class="token function">git</span> clone https://hub.fastgit.org/<span class="token variable">\${<span class="token environment constant">USER</span><span class="token operator">:-</span>&quot;BreezeShane&quot;}</span>/<span class="token variable">\${REPO<span class="token operator">:-</span>&quot;Unsupervised-Learning&quot;}</span>.git
<span class="token builtin class-name">cd</span> <span class="token variable">\${REPO}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最终成果" tabindex="-1"><a class="header-anchor" href="#最终成果" aria-hidden="true">#</a> 最终成果</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># Variables</span>
<span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token variable">$1</span>
<span class="token assign-left variable">REPO</span><span class="token operator">=</span><span class="token variable">$2</span>
<span class="token assign-left variable">ENVNAME</span><span class="token operator">=</span><span class="token variable">$3</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">==</span> <span class="token string">&quot;help&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;To use the shell script, type in this format:<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\t">\\t</span> <span class="token entity" title="\\&quot;">\\&quot;</span>source IAC.sh &lt;USERNAME&gt; &lt;REPONAME&gt; &lt;ENVNAME&gt;<span class="token entity" title="\\&quot;">\\&quot;</span><span class="token entity" title="\\n">\\n</span>Parameter Introduction:<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\t">\\t</span>&lt;USERNAME&gt;: The parameter should be the name of your GitHub account. The default value is <span class="token entity" title="\\&quot;">\\&quot;</span>BreezeShane<span class="token entity" title="\\&quot;">\\&quot;</span><span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\t">\\t</span>&lt;REPONAME&gt;: The parameter should be the name of your GitHub Repository you want to download. The default value is <span class="token entity" title="\\&quot;">\\&quot;</span>Unsupervised-Learning<span class="token entity" title="\\&quot;">\\&quot;</span>.<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\t">\\t</span>&lt;ENVNAME&gt;: The parameter should be the name of your new anaconda virtual environment. The default value is <span class="token entity" title="\\&quot;">\\&quot;</span>OEDL<span class="token entity" title="\\&quot;">\\&quot;</span><span class="token entity" title="\\n">\\n</span>If you type <span class="token entity" title="\\&quot;">\\&quot;</span>source IAC.sh help<span class="token entity" title="\\&quot;">\\&quot;</span> and then the help documentation will be displayed.<span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Download source file.</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Welcome to use Auto Installer!&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Which kind of Anaconda3 would you like?&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;1. 64-Bit (x86) Installer (581 MB)&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;2. 64-Bit (AWS Graviton2 / ARM64) Installer (488 M)&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;3. 64-Bit (Power8 and Power9) Installer (255 MB)&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;4. 64-bit (Linux on IBM Z &amp; LinuxONE) Installer (242 M)&quot;</span>

<span class="token builtin class-name">read</span> TYPEID<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$TYPEID</span> <span class="token parameter variable">-eq</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;x86_64&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$TYPEID</span> <span class="token parameter variable">-eq</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;aarch64&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$TYPEID</span> <span class="token parameter variable">-eq</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;ppc64le&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$TYPEID</span> <span class="token parameter variable">-eq</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;s390x&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
	<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;Invalid type id.&quot;</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">&quot;./Anaconda3-2021.11-Linux-<span class="token variable">\${TYPE}</span>.sh&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token function">wget</span> https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-<span class="token variable">\${TYPE}</span>.sh
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;Anaconda Shell Installer Download Success!&quot;</span>
<span class="token keyword">else</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;Anaconda Shell Installer File exists!&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Auto-Install anaconda3.</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Installing Anaconda3......&quot;</span>
<span class="token punctuation">{</span>
	<span class="token builtin class-name">echo</span> <span class="token variable">\${KEYCODE_ENTER}</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">echo</span> <span class="token variable">\${KEYCODE_ENTER}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sh</span> ./Anaconda3-2021.11-Linux-<span class="token variable">\${TYPE}</span>.sh <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>./Anaconda.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Anaconda3 now is installed!&quot;</span>

<span class="token comment"># Initialize anaconda.</span>
/root/anaconda3/bin/conda init <span class="token function">bash</span>
<span class="token builtin class-name">.</span> ~/.bashrc

<span class="token comment"># Create the virtual environment.</span>
<span class="token punctuation">{</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> conda create <span class="token parameter variable">-n</span> <span class="token variable">\${ENVNAME<span class="token operator">:=</span>&quot;OEDL&quot;}</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span>

<span class="token comment"># Activate the environment.</span>
conda activate <span class="token variable">\${ENVNAME}</span>

<span class="token comment"># conda change channels</span>
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/
conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span>
<span class="token comment"># cat /root/.condarc</span>

<span class="token comment"># pip change channels</span>
pip config <span class="token builtin class-name">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple/
pip config <span class="token builtin class-name">set</span> install.trusted-host mirrors.aliyun.com
<span class="token comment"># cat /root/.config/pip/pip.conf</span>

<span class="token comment"># Download the repo.</span>
<span class="token comment"># git clone https://hub.fastgit.org/BreezeShane/Unsupervised-Learning.git</span>
<span class="token function">git</span> clone https://hub.fastgit.org/<span class="token variable">\${<span class="token environment constant">USER</span><span class="token operator">:=</span>&quot;BreezeShane&quot;}</span>/<span class="token variable">\${REPO<span class="token operator">:=</span>&quot;Unsupervised-Learning&quot;}</span>.git
<span class="token comment"># cd \${REPO}</span>

<span class="token comment"># Install requirements.</span>
pip <span class="token function">install</span> <span class="token parameter variable">-r</span> <span class="token string">&quot;<span class="token variable">\${REPO}</span>/requirements.txt&quot;</span>

<span class="token comment"># Run visdom server.</span>
python <span class="token parameter variable">-m</span> visdom.server <span class="token operator">&amp;</span>

<span class="token comment"># Run the demo.</span>
python Generative<span class="token punctuation">\\</span> Adversaria<span class="token punctuation">\\</span> Networks.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63),i=[o];function l(p,c){return s(),a("div",null,i)}const d=n(t,[["render",l],["__file","AutoIAC.html.vue"]]);export{d as default};
