import{_ as c,W as l,X as u,$ as n,a2 as s,a1 as i,C as a,Y as t,Z as e}from"./framework-68a75bb9.js";const r={},k=i(`<h2 id="指针变量写法" tabindex="-1"><a class="header-anchor" href="#指针变量写法" aria-hidden="true">#</a> 指针变量写法</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PseqList <span class="token function">createNullList_seq</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>m <span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">seqList</span><span class="token operator">*</span> HEAD <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seqList</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seqList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    HEAD<span class="token operator">-&gt;</span>MAXNUM <span class="token operator">=</span> m<span class="token punctuation">;</span>
    HEAD<span class="token operator">-&gt;</span>curNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    HEAD<span class="token operator">-&gt;</span>element <span class="token operator">=</span> <span class="token punctuation">(</span>DataType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DataType<span class="token punctuation">)</span> <span class="token operator">*</span> HEAD<span class="token operator">-&gt;</span>MAXNUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> HEAD<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="临时变量写法" tabindex="-1"><a class="header-anchor" href="#临时变量写法" aria-hidden="true">#</a> 临时变量写法</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">seqList</span> <span class="token function">createNullList_seq</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">seqList</span> HEAD<span class="token punctuation">;</span>
    HEAD<span class="token punctuation">.</span>MAXNUM <span class="token operator">=</span> m<span class="token punctuation">;</span>
    HEAD<span class="token punctuation">.</span>curNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    HEAD<span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token punctuation">(</span>DataType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DataType<span class="token punctuation">)</span> <span class="token operator">*</span> HEAD<span class="token punctuation">.</span>MAXNUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> HEAD<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么不采用临时变量写法" tabindex="-1"><a class="header-anchor" href="#为什么不采用临时变量写法" aria-hidden="true">#</a> 为什么不采用临时变量写法？</h2><p><strong>一方面来说</strong>，在临时变量的写法中，HEAD变量是向系统申请了函数栈内的空间，修改了成员数据后在执行return语句的时候，系统会原封不动地将HEAD变量复制到新的空间内，然后再回收掉整个函数栈。这意味着，你在外部访问到的变量已经不是这个函数内的变量了，而是它的复制版。**那么复制到新的空间又是复制到哪里去了？**答案是具体看你的代码逻辑。</p><p>如果你在外部这样写：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">seqList</span> head <span class="token operator">=</span> <span class="token function">createNullList_seq</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>element<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>curNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printList_seq</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么<code>createNullList_seq</code>函数内的HEAD变量就会复制到function函数内的栈空间中。</p><p>然而如果这样写：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">seqList</span><span class="token operator">*</span> head<span class="token punctuation">;</span>
    <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token function">createNullList_seq</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>element<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>curNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printList_seq</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则是复制到堆空间内了。</p><p>这意味着，如果多个函数相互调用，会造成栈空间的浪费，因为对于每一个函数来说，每调用其它函数一次都要占用掉一部分栈空间。而使用指针变量写法可以避免进行大量不必要的复制行为。</p><p><strong>另一方面来说</strong>，临时变量的写法是将这个临时变量交给操作系统来管理，程序员将无法控制它，这意味着可能在某些时候系统认为它已失去作用，这时它将被回收，而这会导致此后如果再访问使用它将成为非法行为。但使用指针变量写法可以保证你申请的空间不会被意外回收，你拥有管理它的一切权限。</p>`,14),d=t("strong",null,[e("综上所述，我认为"),t("br"),e("使用指针变量的写法要优于使用临时变量写法。")],-1);function m(v,b){const p=a("font"),o=a("center");return l(),u("div",null,[k,n(o,null,{default:s(()=>[n(p,{size:"6",color:"#f2be45"},{default:s(()=>[d]),_:1})]),_:1})])}const f=c(r,[["render",m],["__file","Statement.html.vue"]]);export{f as default};
