(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{635:function(v,_,t){"use strict";t.r(_);var s=t(1),a=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("div",{staticClass:"custom-block info"},[t("p",{staticClass:"custom-block-title"},[v._v("参考链接")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MjM5MTM3MzIzMg==&mid=209513316&idx=1&sn=e5dbd9a2ccccb88d0ee5c4d5790699c1#rd",target:"_blank",rel:"noopener noreferrer"}},[v._v("《SDN软件定义网络从入门到精通》导论课"),t("OutboundLink")],1),v._v(" "),t("a",{attrs:{href:"http://www.keyunict.com/news/news-271.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("SDN的主要分层结构"),t("OutboundLink")],1),v._v(" "),t("a",{attrs:{href:"https://feisky.gitbooks.io/sdn/content/sdn/dataplane.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("SDN数据平面"),t("OutboundLink")],1),v._v(" "),t("a",{attrs:{href:"https://blog.csdn.net/jlwuqi/article/details/90141033",target:"_blank",rel:"noopener noreferrer"}},[v._v("SDN数据平面简介"),t("OutboundLink")],1),v._v(" "),t("a",{attrs:{href:"https://blog.csdn.net/chengxuya/article/details/101052621",target:"_blank",rel:"noopener noreferrer"}},[v._v("SDN控制平面"),t("OutboundLink")],1),v._v(" "),t("a",{attrs:{href:"https://blog.csdn.net/Reality666/article/details/106919581",target:"_blank",rel:"noopener noreferrer"}},[v._v("SDN网络的工作原理"),t("OutboundLink")],1),v._v(" "),t("a",{attrs:{href:"https://blog.csdn.net/vecloud/article/details/109742280",target:"_blank",rel:"noopener noreferrer"}},[v._v("SDN控制器的资源收集过程"),t("OutboundLink")],1),v._v(" "),t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/33383947",target:"_blank",rel:"noopener noreferrer"}},[v._v("SDN学习总结"),t("OutboundLink")],1)])]),v._v(" "),t("h2",{attrs:{id:"sdn的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn的概念"}},[v._v("#")]),v._v(" SDN的概念")]),v._v(" "),t("div",{staticClass:"custom-block info"},[t("p",{staticClass:"custom-block-title"},[v._v("ONF组织给出的定义")]),v._v(" "),t("p",[v._v("SDN architecture decouples the network control and forwarding functions enabling the network control to become directly programmable and the underlying infrastructure to be abstracted for applications and network services. The OpenFlow protocol is a foundational element for building SDN solutions.")])]),v._v(" "),t("div",{staticClass:"custom-block info"},[t("p",{staticClass:"custom-block-title"},[v._v("ON.LAB组织给出的定义")]),v._v(" "),t("p",[v._v("SDN's key attributes include: sepatation of the data and control planes; a uniform, vendor-agnostic interface(called OpenFlow) between control and data planes; alogcally centralized control plane that offers a consistent, network wide view to programmers or operators.")])]),v._v(" "),t("div",{staticClass:"custom-block info"},[t("p",{staticClass:"custom-block-title"},[v._v("维基百科的定义")]),v._v(" "),t("p",[t("strong",[v._v("软件定义网络")]),v._v(" （英语：Software-Defined Networking，缩写作  "),t("strong",[v._v("SDN")]),v._v(" ）是一种新型网络架构。它利用OpenFlow协议将路由器的控制平面（Control Plane）从数据平面（Data Plane）中分离，改以软件方式实现，从而使得将分散在各个网络设备上的控制平面进行集中化管理成为可能 ，该架构可使网络管理员在不更动硬件设备的前提下，以中央控制方式用程序重新规划网络，为控制网络流量提供了新方案，也为核心网络和应用创新提供了良好平台。SDN可以按使用领域分为：SD-WAN, SD-LAN, SD-DC, SDN将人工智能引入到网络系统里来，将是未来几年最热门的网络前沿技术之一。")])]),v._v(" "),t("p",[v._v("SDN是一种新的网络体系结构，给传统网络带来最大的改变是网络可变成和开放性。网络用户追逐SDN的关键是想获得更多的网络可编程能力，获得更多的网络定制开发能力和自主权。SDN的开放分层架构加速了网络产业的参与度，越来越多的网络用户、网络软件公司和初创公司都加入到网络产业中来，这种开放竞争进一步加速整个产业的创新。")]),v._v(" "),t("h2",{attrs:{id:"sdn为什么会出现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn为什么会出现"}},[v._v("#")]),v._v(" SDN为什么会出现")]),v._v(" "),t("p",[v._v("在出现SDN之前的传统网络出现的问题比较多，一般都是缺了什么或者担心什么问题，就新添加一个东西专门解决，以至于后期网络堆叠繁重冗余。")]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("问题一：传统网络管理和部署非常麻烦")]),v._v(" "),t("p",[v._v("对于一个庞大的网络来说，首先显而易见的是网络厂商杂、设备类型多、设备数量多、命令不一致，极大地加重了部署的难度，管理起来十分繁琐。")]),v._v(" "),t("p",[v._v("我们首先要知道网络设备之间是如何协同工作的：")]),v._v(" "),t("ol",[t("li",[v._v("网络设备之间的沟通主要通过网络协议「交换、路由、标签、安全等协议」来实现，大体的工作流程都是按照  "),t("code",[v._v("邻居建立")]),v._v("-信息共享"),t("code",[v._v("-路径选择")]),v._v("  这三个步骤来实现的，是很多协议设计的逻辑基础。")]),v._v(" "),t("li",[v._v("大部分的传统网络是采用典型的分布式架构，设备和设备之间以“接力棒”的方式交互本地信息，而后建立数据库信息，再根据路径选择算法进行最优路径的选择，其中最具代表性的算法是SPF算法。")]),v._v(" "),t("li",[v._v("每个设备会进行独立计算，各自都有自己独立的计算设备和转发设备。")]),v._v(" "),t("li",[v._v("协议是互联网的基础。")])]),v._v(" "),t("p",[v._v("那么如果网络发生变动，又应该如何进行交互：")]),v._v(" "),t("ol",[t("li",[v._v("当网络发生动荡时，网络设备会将故障信息以“接力棒”的方式不断告知下一个邻居设备，然后将故障路径信息删除。")]),v._v(" "),t("li",[v._v("网络收敛过程中，有可能出现冗余的路径通告信息。\n如果遇到流量暴涨拓扑膨胀时：")]),v._v(" "),t("li",[v._v("随着云计算、大数据、移动互联网等技术发展，流量不断翻番，使得底层网络的体积膨胀，压力增大；网络体积越大，需要收敛的时间越长，等。")]),v._v(" "),t("li",[v._v("在所有的网络类型中，数据中心网「互联网公司」、电信网「运营商」的网络压力最大，需要变革的意愿最强烈。")])])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("问题二：分布式网络架构瓶颈凸显")]),v._v(" "),t("p",[v._v("从问题一中可知，传统网络的三大特征是独立计算、接力棒交互、分布式架构，如今这三方面都可以看到瓶颈日益凸显。")]),v._v(" "),t("p",[v._v("传统网络中网络带宽分配如何解决：")]),v._v(" "),t("ol",[t("li",[v._v("流量控制一般采用Qos/TE等技术来实现，大体思路是：\n通过为流量分类和标记，定义不同的优先级别，根据业务需求，分配不同的带宽。流量控制的好坏直接影响带宽的利用率，影响客户的投资效益。")]),v._v(" "),t("li",[v._v("流量控制技术可以在支持Qos/TE的交换机、路由器等产品上执行，也可以在专业的流量控制产品「负载均衡器」上实现。")]),v._v(" "),t("li",[v._v("不管是软件还是硬件实现流量控制，传统的流量控制产品大体是一种静态带宽处理，即根据业务需求，制定待定规则，走特定的链路等等，策略一般是前期固定好的，无法根据网络情况，智能地实现带宽分配，即动态带宽处理。")])]),v._v(" "),t("p",[v._v("传统网络中还存在着难以流量可视化的情况：")]),v._v(" "),t("ol",[t("li",[v._v("常规流量控制产品只能实现部分链路带宽分配可视化，常规网管系统只能实现链路状态故障检测等，无法实现全网全局链路带宽可视化。")]),v._v(" "),t("li",[v._v("全网流量可视化是带宽智能调配的基础。")])])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("问题三：流量控制是棘手难题")]),v._v(" "),t("p",[v._v("问题二中提到的带宽静态分配、难以流量可视化的情况正是导致流量控制十分棘手的关键所在。")]),v._v(" "),t("p",[v._v("在传统网络中，我们既不能自定义设备的转发策略，也不能将软件运行在设备上，因为：")]),v._v(" "),t("ol",[t("li",[v._v("传统网络设备的工作方式一般都是固定好的，如交换机根据MAC地址表转发「基于源MAC学习，基于目的MAC转发」，路由器根据路由表转发「修改源目MAC，源目IP不修改，基于目的IP查表」。")]),v._v(" "),t("li",[v._v("按照业务需求进行网络设备的策略自定义，实际上是一个可编程的需求。而传统网络设备是一个黑盒子，内部源码、产品功能对用户封闭，话语权在网络厂商这里。")]),v._v(" "),t("li",[v._v("不可编程，无法按需，是网络设备几十年来的老规矩。")])])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("问题四：无法按需，不可编程")]),v._v(" "),t("p",[v._v("无法按需，不可编程。这就意味着如果需求有变动，就只能从硬件设计开发开始到软件应用开发来实现这一项大工程了。变更需求就要另起炉灶，即使这个需求可能非常合理、简单，变更的也微小。这一现象也被人形象地描述为“吃硬不吃软”。从中可以看出，传统网络存在着不灵活、不通用的巨大问题，这个问题将导致开发成本十分高昂，开发周期十分漫长。")])]),v._v(" "),t("h2",{attrs:{id:"sdn网络与传统网络的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn网络与传统网络的比较"}},[v._v("#")]),v._v(" SDN网络与传统网络的比较")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("SDN网络")]),v._v(" "),t("th",[v._v("传统网络")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("控制转发分离")]),v._v(" "),t("td",[v._v("控制转发耦合")])]),v._v(" "),t("tr",[t("td",[v._v("集中式控制")]),v._v(" "),t("td",[v._v("分布式控制")])]),v._v(" "),t("tr",[t("td",[v._v("可编程")]),v._v(" "),t("td",[v._v("不可编程")])]),v._v(" "),t("tr",[t("td",[v._v("开放接口")]),v._v(" "),t("td",[v._v("不开放接口")])]),v._v(" "),t("tr",[t("td",[v._v("虚拟化")]),v._v(" "),t("td",[v._v("实体化")])])])]),v._v(" "),t("h2",{attrs:{id:"sdn的三大特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn的三大特性"}},[v._v("#")]),v._v(" SDN的三大特性")]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("网络开放可编程")])]),v._v(" "),t("p",[v._v("SDN为网络用户提供了丰富的可编程API，用户可以通过南向接口编程网络设备，用户在控制器上面编写自己的网络应用程序。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("数控分离")])]),v._v(" "),t("p",[v._v("将网络控制平面从数据平面中解耦合。传统的网络设备控制部分与数据处理部分是绑定在一起的，SDN实现了数控分离，网络控制平面与数据平面之间通过南向接口分离开来，不再相互依赖。这样做的好处是：用户不再受限于设备厂商，对网络设备有更多的自主权。另外控制平面与数据平面可以独立完成体系结构的演进，类似于计算机工业的Wintel模式，处理器和操作系统的技术演进不用互相依赖。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("逻辑上集中控制")])]),v._v(" "),t("p",[v._v("传统的网络设备管理、控制和编程是分布式思路，SDN提倡集中式的管理和控制，通过控制器完成网络设备和整个网络的抽象，用户可以通过编写软件的方式在控制器上实现自己的网络业务和方案。")])])]),v._v(" "),t("h2",{attrs:{id:"sdn的分层体系结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn的分层体系结构"}},[v._v("#")]),v._v(" SDN的分层体系结构")]),v._v(" "),t("p",[t("img",{attrs:{src:"/images/SDN/sdn-architecture.png",alt:""}})]),v._v(" "),t("p",[v._v("SDN在应用中大体可划分为三层体系结构：控制层（Control Layer）、应用层（Application Layer）和基础设施层（Infrastructure Layer）。不同层次之间是通过不同接口进行通信的，比如应用层是通过北向接口（Northboundinterface）与控制层通信，而基础设施层则是通过南向接口（Southboundinterface）与控制层通信。")]),v._v(" "),t("p",[v._v("而ONF (Open Networking Foundation)也给出这三层的含义及作用：")]),v._v(" "),t("ul",[t("li",[v._v("应用层包括各种不同的业务应用")]),v._v(" "),t("li",[v._v("控制层负责数据平面资源的编排、维护网络拓扑和状态信息等")]),v._v(" "),t("li",[v._v("数据层负责数据处理、转发和状态收集")])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("控制层")]),v._v(" "),t("p",[v._v("控制层是SDN控制器管理网络的基础设施，可以根据需要灵活选择多种控制器。在这一层中，控制器中包含大量业务逻辑，以获取和维护不同类型的网络信息、状态详细信息、拓扑细节、统计详细信息等。")]),v._v(" "),t("p",[v._v("由于SDN控制器是用于管理网络的，所以它必须具有用于现实世界网络使用情况的控制逻辑，如交换、路由、二三层VPN、防火墙安全规则、DNS、DHCP和集群，网络供应商和开源社区需要在自己的SDN控制器中实现自己的服务，而这些服务会向应用层公开自己的API。")]),v._v(" "),t("p",[v._v("目前市场上的SDN控制器解决方案大致可以分为两类：大型网络设备厂商提供商业方案，如CiscoOpen SDN controller；社区组织提供的开源方案，如OpenDaylight等。")])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("基础设施层")]),v._v(" "),t("p",[v._v("基础设施层，由各种网络设备构成，它可以是数据中心的一组网络交换机和路由器。控制层负责管理底层物理网络，物理层的实现可以是支持OpenFlow的硬件交换机。随着虚拟化技术的完善，SDN交换机可以是软件形态，如OVS就是一款基于开源技术实现的、能够与服务器虚拟化（Hypervisor）集成，具备交换机的功能的虚拟交换机。另外，OVS支持传统的标准管理接口，如NetFlow和sFlow等。")])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("应用层")]),v._v(" "),t("p",[v._v("应用层对于开发者来说是开放区域，鼓励开发尽可能多的创新应用。包括网络的可视化：拓扑结构、网络状态、网络统计等；网络自动化相关应用：网络配置管理，网络监控，网络故障排除，网络安全策略等。SDN应用程序可以为企业和数据中心网络提供各种端到端的解决方案。")])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("南向接口")]),v._v(" "),t("p",[v._v("控制层到基础设施层（网络交换机）通讯需要经过南向接口，目前主要的协议是OpenFlow、NetConf、OVSDB。OpenFlow协议是事实上的国际行业标准，其中NOX、Onix、Floodlight都是基于OpenFlow协议实现的开源控制器。作为一个开放的协议，OpenFlow突破了传统网络设备厂商各自为政形成的设备能力接口壁垒。")])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("北向接口")]),v._v(" "),t("p",[v._v("应用层通过API方式与SDN控制器通讯。与南向接口不同，现在北向接口还缺少业界公认的标准，实现方案思路有的从用户角度出发、有的从运营商角度出发、有的从产品能力角度出发。技术风格上，部分传统的网络设备厂商倾向于在现有的设备上提供编程接口供业务App调用，许多上层应用的开发者也比较倾向于采用 REST API 接口的形式。")])]),v._v(" "),t("h2",{attrs:{id:"sdn数据平面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn数据平面"}},[v._v("#")]),v._v(" SDN数据平面")]),v._v(" "),t("p",[t("img",{attrs:{src:"/images/SDN/20190512150552556.png",alt:""}})]),v._v(" "),t("p",[v._v("::: note 传统网络数据平面")]),v._v(" "),t("p",[v._v("数据平面主要执行网络控制逻辑，数据包的处理主要通过查询由控制平面所生成的FIB表来完成包处理流程。")]),v._v(" "),t("p",[v._v("传统网络数据平面的特点:")]),v._v(" "),t("ul",[t("li",[v._v("数据转发处理都是协议相关的；")]),v._v(" "),t("li",[v._v("只支持有限的用户配置，不支持编程自定义。")])]),v._v(" "),t("p",[v._v(":::")]),v._v(" "),t("p",[v._v("数据平面负责数据处理、转发和状态收集等。其核心设备为交换机，可以是物理交换机，也可以是虚拟交换机。不同于传统网络转发设备，应用于SDN中的转发设备将数据平面与控制平面完全解耦，所有数据包的控制策略由远端的控制器通过南向接口协议下发，网络的配置管理同样也由控制器完成，这大大提高了网络管控的效率。交换设备只保留数据平面，专注于数据包的高速转发，降低了交换设备的复杂度。")]),v._v(" "),t("p",[v._v("本质上来说，决定SDN可编程能力的因素在于数据平面的可编程性，所以就有了通用可编程数据平面OpenFlow Switch。通用可编程数据平面支持用户通过软件编程的方式任意定义数据平面的能力，包括数据包的解析、处理等功能。")]),v._v(" "),t("p",[v._v("SDN数据平面的特点:")]),v._v(" "),t("ul",[t("li",[v._v("处理流程中的：解析（Parser）、转发（Forwarding）和调度 （Scheduling）都是可编程、协议无关的；")]),v._v(" "),t("li",[v._v("传统网络设备的二层或三层转发表抽象成流表；")])]),v._v(" "),t("h2",{attrs:{id:"sdn控制平面及sdn控制器实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn控制平面及sdn控制器实现原理"}},[v._v("#")]),v._v(" SDN控制平面及SDN控制器实现原理")]),v._v(" "),t("p",[v._v("SDN控制平面主要由一个或者多个控制器组成，是作为数据控制分离的SDN的操作系统的存在。一方面，控制器通过南向接口协议对底层网络交换设备进行集中管理、状态监测、转发决策以处理和调度数据平面的流量；另一方面，控制器通过北向接口向上层应用开放多个层次的可编程能力，允许网络用户根据特定的应用场景灵活的制定各种网络策略。")]),v._v(" "),t("p",[v._v("而控制器的设计目标是通过对底层网络进行完整的抽象，以允许开发者根据业务需求设计出各式各样的网络应用。")]),v._v(" "),t("h3",{attrs:{id:"控制器需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制器需求"}},[v._v("#")]),v._v(" 控制器需求")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("在广域网部署SDN，单个控制器所面临的网络规模根据场景不同而不同。")])]),v._v(" "),t("li",[t("p",[v._v("在IPRAN的移动接入场景，在一个城市，目前的规模已经达到2万台设备，未来会更多。")])]),v._v(" "),t("li",[t("p",[v._v("对于目前典型的骨干网和城域网，设备规模从几百台2000台，主要压力是边缘接入业务路由的计算。")])]),v._v(" "),t("li",[t("p",[v._v("在数据中心解决方案场景，采用OVERLAY方式完成网络虚拟化功能。这种网络虚拟化是在数据中心服务器上直接启动一个软件交换机，然后使用VXLAN技术，直接构建海量租户的虚拟二层网络。")])])]),v._v(" "),t("h3",{attrs:{id:"sdn控制器现网迁移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn控制器现网迁移"}},[v._v("#")]),v._v(" SDN控制器现网迁移")]),v._v(" "),t("p",[v._v("迁移演进方式有多种，其中一种是SDN网络的部署可能先在某些局部网络部署，这个单独的SDN网络需要和传统的分布式网络互通，这就需要SDN控制器能够支持传统的一些网络业务协议，比如BGP进行互通。")]),v._v(" "),t("h3",{attrs:{id:"sdn控制器与控制平台的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn控制器与控制平台的关系"}},[v._v("#")]),v._v(" SDN控制器与控制平台的关系")]),v._v(" "),t("p",[v._v("控制器是一个大型控制软件系统，它需要一个控制平台，这个平台成为网络操作系统（NOS），主要负责网络资源管理。传统的分布式网络有设备软件系统，但没有网络操作系统。")]),v._v(" "),t("p",[t("strong",[v._v("网元硬件管理")]),v._v("：对应传统网络中的EMS专业网管，这部分功能可以放在SDN体系内，也可以作为一个单独的网络管理模块部署。")]),v._v(" "),t("p",[t("strong",[v._v("网元资源管理")]),v._v("：针对不同的网元类型，其网元资源也是不同的。")]),v._v(" "),t("h3",{attrs:{id:"基本功能层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本功能层"}},[v._v("#")]),v._v(" 基本功能层")]),v._v(" "),t("p",[v._v("一个通用的控制器可以方便的添加接口协议，这对于动态灵活的部署SDN非常重要，因此在这一层首先要完成就是协议适配功能。")]),v._v(" "),t("p",[v._v("需要适配的协议主要包含两类：第一类是用来跟底层交换设备进行信息交互的南向接口协议。第二类是用于控制平面分布式部署的东西向接口协议。")]),v._v(" "),t("p",[v._v("协议适配层主要有以下三方面作用：")]),v._v(" "),t("ol",[t("li",[v._v("网络的维护人员可以根据网络的实际情况，使用较合适的协议来优化整个SDN；")]),v._v(" "),t("li",[v._v("考虑到与传统网络的兼容性问题，可以借鉴使用现有网络协议作为南向、东西向接口协议，这样可以以最小的代价来升级和改造传统网络；")]),v._v(" "),t("li",[v._v("通过协议适配功能，控制器能够完成对底层多种协议的适配，并向上层提供统一的API，达到对上层屏蔽底层多种协议的目的。")])]),v._v(" "),t("p",[v._v("协议适配工作完成后，控制器需要提供用于支撑上层应用开发的功能。这些功能主要包括四部分：")]),v._v(" "),t("ol",[t("li",[v._v("模块管理：重点完成对控制器中各模块的管理。允许在不停止控制器运行的情况下加载新的应用模块，实现上层业务变化前后底层网络环境的无缝切换。")]),v._v(" "),t("li",[v._v("事件机制：该模块定义了事件处理相关的操作，包括创建事件、触发事件、事件处理等操作。事件作为消息的通知者，在模块之间划定了清晰地界限，提高了应用程序的可维护性和重用性。")]),v._v(" "),t("li",[v._v("任务日志：该模块提供基本日志功能。开发者可以用它来快速的调试自己的应用程序，网络管理人员可以用它来高效、便捷的维护SDN。")]),v._v(" "),t("li",[v._v("资源数据库：这个数据库包含了底层各种网络资源的实时信息，主要包括交换机资源、主机资源、链路资源等，方便开发人员查询使用。")])]),v._v(" "),t("h3",{attrs:{id:"网络基础服务层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络基础服务层"}},[v._v("#")]),v._v(" 网络基础服务层")]),v._v(" "),t("p",[v._v("为让开发者能够专注于上层的业务逻辑，提高开发效率，需要在控制器中加入网络基础服务层，以提供基础的网络功能。")]),v._v(" "),t("p",[v._v("该层中的模块可以通过调用基本功能层的接口来实现设备管理、状态检测等一系列基本功能。这一层涵盖的模块有很多，取决于控制器的具体实现，下面介绍五个主要的功能模块。")]),v._v(" "),t("ol",[t("li",[v._v("交换机管理：控制器从资源数据库中得到底层交换机信息，并将这些信息以更加直观的方式提供给用户以及上层应用服务的开发者。")]),v._v(" "),t("li",[v._v("主机管理：与交换机管理模块的功能类似QUESTION，重点负责提取网络中主机的信息。")]),v._v(" "),t("li",[v._v("拓扑管理：控制器从资源数据库中提到链路、交换机和主机的信息后，就会形成整个网络的拓扑结构图。")]),v._v(" "),t("li",[v._v("路由、转发策略：提供数据分组的转发策略，最简单的策略有根据二层Mac地址转发、根据IP地址转发数据分组。用户也可以在此基础上继续开发来实现自己的转发策略。")]),v._v(" "),t("li",[v._v("虚拟网划分：虚拟网划分可以有效利用网络资源，实现网络资源价值的最大化。但是出于安全性的考虑，SDN控制器必须能够通过集中控制和自动配置的方式实现对虚拟网络的安全隔离。")])]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("提示")]),v._v(" "),t("p",[v._v("在这两层的基础上，控制器通过向上层应用开发者提供各个层次的编程接口，以便向网络开发者调用从信令级到各种网络服务的SDN可变层能力，灵活便捷的完成对整个SDN的设计与管理。其中基础功能曾非常重要，实现了对底层硬件的抽象和对上层网络功能模块的管理，所有的网络应用都给予这一层提供的接口进行开发。")])]),v._v(" "),t("h2",{attrs:{id:"sdn的工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn的工作原理"}},[v._v("#")]),v._v(" SDN的工作原理")]),v._v(" "),t("ol",[t("li",[v._v("控制器和转发器之间的控制通道建立，通常使用传统的IGP来打通控制通道。")]),v._v(" "),t("li",[v._v("控制器和转发器建立控制协议连接后，需要从转发器收集网络资源信息，包括设备信息，接口信息，标签信息等，控制器还需要通过拓扑收集协议收集网络拓扑信息。")]),v._v(" "),t("li",[v._v("控制器利用网络拓扑信息和网络资源信息计算网络内部的交换路径，同时控制器会利用一些传统协议和外部网络运行的一些传统路由协议，包括BGP，IGP等学习业务路由并向外扩散业务路由，把这些业务路由和内部交换路径转发信息下发给转发器。")]),v._v(" "),t("li",[v._v("转发器接受控制器下发的网络内部交换路径转发表数据和业务路由转发表数据，并依据这些转发表进行报文转发。")]),v._v(" "),t("li",[v._v("当网络状态发生变化时，SDN控制器会事实感知网络状态，并重新计算网络内部交换路径和业务路由，以确保网络能够继续正常提供服务。")])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("SDN网络的控制器和转发器的控制通道建立过程")]),v._v(" "),t("p",[v._v("SDN控制器是SDN网络中的大脑，是控制单元。而转发器是SDN网络的手脚，是执行单元。")]),v._v(" "),t("p",[v._v("在SDN网络架构下，控制器和转发器之间通道的建立和维护非常重要，SDN控制通道包括带内方式和带外方式这两种通道的通讯方式：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("带外方式需要独立的信令物理网络，成本高，独占网络带宽。转发器通过独立的物理网络和控制器连接。这个独立的带外网络，可以直接运行简单的传统分布式控制协议IGP，确保转发器和控制器之间的通信打通。")])]),v._v(" "),t("li",[t("p",[v._v("带内方式是业务网络公用物理网络，成本低，通过优先级机制——也就是控制通道和用户业务共用一张物理网络。而对于大型IP网络，出于成本考虑，一般选择带内控制通道方式。更多场景下，用户不可能专门建立一个管理网络，也就是独立的管理网络是不存在的，只能用带内控制通道来进行通信。\n带内方式又有两种方式来建立转发器和控制器之间的通道：")]),v._v(" "),t("ol",[t("li",[v._v("第一种方法是控制器和每个转发器之间都有一个直接连接的物理线路，这样控制器通过这个物理线路可以和任何一个转发器通信，但这种方法要求控制器配置很多接口，工程上基本不可行。")]),v._v(" "),t("li",[v._v("第二种方法是在带内利用传统分布式控制协议来打通控制通道，对于这种方法又可以分二层网络和三层网络来分别采用某种协议来打通控制通道。")])])])]),v._v(" "),t("p",[v._v("通道的建立过程分为二层网络的建立和三层网络的建立：")]),v._v(" "),t("p",[v._v("二层网络可以采用MSTP协议来协助破坏建立二层连接。这种情况的主要应用场景是数据中心控制器，控制器和交换机可以部署在同一个子网内，这样它们之间可以通过二层寻址，而不需要通过三层寻址。为了隔离控制器和转发器通讯与其他用户业务之间的通信，建议把他们之间的通信划分到一个独立的VLAN内部。")]),v._v(" "),t("p",[v._v("三层网络可以采用传统的IGP来进行路由学习和打通控制通道。在数据中心内部，有时可以采用二层网络来完成控制器和转发器之间的控制通道，但当数据中心网络规模很大时也需要三层网络技术来解决控制器和转发器之间通信通道的建立。在控制器和转发器之间运行IGP，此时的控制器就是一台普通的路由器，可以通过IGP学习到拓扑并生成互联路由，这样一来，控制器和转发器之间的通信关系就如同一个传统分布式网络，从而保持了控制器和转发器之间的高可靠连通性。同时，控制器不是一个普通路由器，可以通过配置IGP（比如ISIS协议中的OVERLOAD功能）来阻止用户业务流量进入控制器。当然，所谓控制器不能转发用户流量可以说是一个限制，但在某些特定场景下这些限制也可以去掉，比如小规模网络中，客户可能希望在某台路由器上直接把控制器软件运行在里面，此时这台控制器本身也同时是一台路由器。")]),v._v(" "),t("Badge",{attrs:{text:"「注意」",type:"error"}}),v._v("三层网络下控制器其实和传统路由器有着一样的功能，但是要组织流量转发到控制器，很多IGP中有类似的功能来阻止这一点。\n"),t("p",[v._v("刚刚说的是通过传统分布式控制协议来让控制器学习并生成路由表并下发给转发器，在这种模式下，如果路由表里不存在相应的路由则报文被直接丢弃处理，这个就是IP转发理念。但是控制实现架构中，还有一种技术是流触发生成路由表，也就是说，对于一个转发表中不存在转发表数据的用户流进入转发器时，转发器需要把这个报文递交给控制器，转发器根据这个报文来生成一个转发表下发给转发器，使得该用户流的下一个报文进入系统时就可以命中转发表进行转发了。从安全性角度看，流触发生成路由表容易造成流量攻击，因此流触发技术不是一个合适的技术，也不符合IP技术的核心理念，仅仅在某些极其特殊场景下使用，并且要做好流攻击阻断工作。")]),v._v(" "),t("p",[v._v("还有一些场景下：控制器需要穿越某些网络去控制远程网络，一个简单的方案就是在控制器和转发器之间建立一个隧道，并在这个隧道上启动IGP。\n用以上描述方法建立的控制通道，当网络发生状态变化时，由于采用了传统的分布式控制网络技术作为控制通道建立的技术，所以能够达到任何时刻只要拓扑上有路连接，通信上就能够打通的要求，同时故障感知到的收敛时间也都在1s以内。")])],1),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("SDN控制器的资源收集过程")]),v._v(" "),t("p",[v._v("控制器和转发器的控制通道建立完成后，转发器主动向控制器发起控制协议连接，控制协议为openflow等协议，认证后建立。")]),v._v(" "),t("p",[t("strong",[v._v("网元资源信息收集")]),v._v("（注册信息，MPLS标签信息，转发器的接口资源信息等）")]),v._v(" "),t("p",[v._v("接下来，转发器向控制器注册信息、上报资源：接口资源、标签信息、VLAN资源、设备信息等。控制器采集这些信息是用来安装特定厂家设备的驱动程序、根据这些信息安装特定的接口协议和数据转换功能。控制器需要收集标签信息，这里的标签是指MPLS标签。这是因为控制器控制的网络内部交换技术通常采用MPLS交换，因为这项技术非常成熟，报文封装比较短小（4字节），有利于节省网络的带宽占用。另外，厂家差异问题也需要控制器实现动态安装驱动程序的能力。驱动程序会完成控制器到特定厂家的设备的接口协议和数据转换功能。而控制器正是根据设备厂家、设备类型、设备版本号进行本地搜索和加载对应的驱动程序。")]),v._v(" "),t("p",[v._v("控制器收集标签信息，控制器控制的网络内部交换技术通常采用MPLS交换，原因有以下两点：")]),v._v(" "),t("ol",[t("li",[v._v("MPLS协议成熟，多厂商均支持")]),v._v(" "),t("li",[v._v("MPLS封装仅需4字节，转发性能高")])]),v._v(" "),t("p",[v._v("收集标签原因：")]),v._v(" "),t("ol",[t("li",[v._v("控制器需要为整条LSP分配标签，厂家转发器设备能够支持的标签空间不足，需要控制器收集转发器的标签空间资源。")]),v._v(" "),t("li",[v._v("分布式控制和SDN控制器混合组网情况下，分布式控制平面会占用一部分标签，为了保证唯一性，需要回收标签资源。")])]),v._v(" "),t("p",[v._v("收集接口信息「接口名字、接口ID、接口类型、接口带宽资源等」原因：")]),v._v(" "),t("ol",[t("li",[v._v("接口资源分为两类：\n"),t("ol",[t("li",[v._v("网络外联接口，连接SDN网络外部的网络设备上。控制器需要知道网络下面有多少外联业务口可以部署业务，在部署业务时需要对这些外联口进行业务配置。")]),v._v(" "),t("li",[v._v("网络内部接口，SDN控制的网络设备之间的接口。控制器需要使用这些接口信息形成最终拓扑，计算出网络内部的交换路径。")])])]),v._v(" "),t("li",[v._v("根据带宽资源计算出网络内部的交换路径，确保网络业务流量不会集中到某条链路上，造成最短路径拥塞的情况。")]),v._v(" "),t("li",[v._v("收集VLANID、隧道id等原因，同标签原因类似，需要知道VLAN等可用资源以便外联口的业务接入时使用。")])]),v._v(" "),t("p",[t("strong",[v._v("拓扑信息收集")]),v._v("（网络拓扑包括三个对象：节点对象，接口对象，链路对象。控制器收集转发器的拓扑协议主要是LLDP）")]),v._v(" "),t("p",[v._v("控制器还需要进行网络拓扑信息收集，网络拓扑是描述网络中节点和链路以及节点之间的连接关系的信息。")]),v._v(" "),t("p",[v._v("网络拓扑由三个对象组成：")]),v._v(" "),t("ol",[t("li",[v._v("节点对象，即转发器对象")]),v._v(" "),t("li",[v._v("接口对象(TP、Terminal Point、业务接入点)转发器上的接口：节点ID+接口ID标记")]),v._v(" "),t("li",[v._v("链路对象 左接口+右接口ID是(左节点，左接口，右节点，右接口)")])]),v._v(" "),t("p",[v._v("转发器可以上报设备对象和接口对象，但不能上报链路对象，必须要有一个方法来收集这种连接关系以确定链路对象信息，才能获得完整的拓扑信息。")]),v._v(" "),t("p",[v._v("控制器收集网络拓扑的方法目前有不少标准协议定义：")]),v._v(" "),t("p",[v._v("其中一个主要的协议是二层网络设备发现协议——链路层发现协议（LLDP），它是IEEE定义的二层网络设备发现协议，尤其适用在数据中心网络，其基本原理是转发器向每个接口发送一个LLDP报文，接收到LLDP报文的设备增加自己接收该报文的接口信息和设备ID，从而控制器就获得两个转发器之间的连接信息，如果控制器从每台转发器都获得类似的信息，最后控制器就获得完整的二层网络拓扑。")]),v._v(" "),t("p",[v._v("拓扑信息收集的第二个协议是三层拓扑收集协议，通常利用传统的IGP，比如ISIS/OSPF，这两个只能洲际某个区域的拓扑，BGP-ls可以手机多域的拓扑。")]),v._v(" "),t("p",[v._v("特殊应用场景中，会通过人工配制的方式向拓扑加一些对象，比如数据中心：需要管理接入网络的虚拟机的信息，以便应用程序能获得这个虚拟机从哪个交换机进入网络的位置信息。再比如业务链路需求中：增值业务处理设备(Value Added Service，VAS，通常指防火墙、负载均衡器、内容缓存等)的位置信息，以便控制器能够计算出业务链路由，完成用户链需求。")]),v._v(" "),t("p",[v._v("用内存存储或者数据存储等内部数据库存储网络信息和设备信息，如何存储取决于性能要求。其中，数据库作为一种持久化存储方式，实时性能有所欠缺，而内存数据库性能提升很大。")]),v._v(" "),t("p",[v._v("控制器应该收集网元的逻辑信息，对网元进行建模，抽象出一套转发器网元的模型，控制不需要关心转发器网元的模型，如果关注转发器的物理细节，也只是为了把一个网元网管(EMS)集成到控制器，逻辑上仍然分为控制器和网元网管两个逻辑单元。")]),v._v(" "),t("p",[v._v("通过上述信息，转发器已经收集到了必要的转发器网元资源信息，比如接口、标签、VLANid等信息，有利这些信息，控制器就可以进行下一步的路由计算过程了。")])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("SDN控制器的流表计算和下发过程")]),v._v(" "),t("p",[v._v("SDN网络内部交换路由的生成\n边缘业务接入路由的处理，边缘的业务接入点是用于接入网络业务的，所有的用户流量都需要通过边缘业务接入节点进入网络，然后穿过内部交换网，到达另外一个边缘的业务接入节点。")]),v._v(" "),t("p",[t("strong",[v._v("流表计算")]),v._v("：控制器计算网络交换路径是根据业务策略来进行的，有的业务需要考虑网络的带宽、时延等属性，有的业务可能不关心带宽和时延而是只关心可达性。")]),v._v(" "),t("p",[t("strong",[v._v("流表下发")]),v._v("：有多种协议支持流表下发，包括PCE协议、BGP协议、Netconf协议、OpenFlow协议等。")])]),v._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[v._v("SDN转发面的报文转发")]),v._v(" "),t("p",[v._v("SDN的转发过程和传统网络的转发过程没有任何区别。")]),v._v(" "),t("p",[v._v("在SDN网络架构下，尽管转发面的转发技术可以使用OpenFlow转发技术（是OpenFlow转发技术而不是OpenFlow控制协议），但这并不是必需的，使用传统的转发流程是完全一样的。")])]),v._v(" "),t("h2",{attrs:{id:"sdn的优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn的优势"}},[v._v("#")]),v._v(" SDN的优势")]),v._v(" "),t("p",[v._v("从SDN的特征出发，SDN的优势包括：")]),v._v(" "),t("ul",[t("li",[v._v("灵活性，动态调整网络设备的配置，再也不需要人工去配置每台设备")]),v._v(" "),t("li",[v._v("网络硬件简化（如白牌交换机等），只需要关注数据的处理和转发，与业务特性解耦，加快了新业务的引入速度")]),v._v(" "),t("li",[v._v("网络的自动化部署和运维、故障诊断")])]),v._v(" "),t("h2",{attrs:{id:"sdn的典型应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdn的典型应用"}},[v._v("#")]),v._v(" SDN的典型应用")]),v._v(" "),t("p",[t("em",[v._v("未完待续")]),v._v("……")])])}),[],!1,null,null,null);_.default=a.exports}}]);