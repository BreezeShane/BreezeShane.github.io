import{_ as c,W as r,X as t,Y as n,Z as e,$ as d,a2 as i,a1 as a,C as l}from"./framework-68a75bb9.js";const o={},u=a('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>在做项目的我正为自己的显卡太小跑不了预测而发愁的时候，由于非常微妙的缘分，我白嫖到一个装有GeForce GTX 1060显卡的主机，更令人高兴的是这个主机装上的系统就是Manjaro！</p><h2 id="怎么做" tabindex="-1"><a class="header-anchor" href="#怎么做" aria-hidden="true">#</a> 怎么做？</h2><p>这个系统已经基本把绝大多数事都做好了，因此我们只需要做一点点工作就行。首先要明确一点：这个主机是用作服务器的，不作日常使用。</p><h3 id="前期工作" tabindex="-1"><a class="header-anchor" href="#前期工作" aria-hidden="true">#</a> 前期工作</h3>',5),p=a(`<h3 id="搭建虚拟内网" tabindex="-1"><a class="header-anchor" href="#搭建虚拟内网" aria-hidden="true">#</a> 搭建虚拟内网</h3><p>为了能在各地自由使用，我决定使用ZeroTier-One来构建一个虚拟内网，然后将我目前使用的两个设备jion到同一个内网即可。服务器上只消执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> zerotier-one
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> zerotier-one.service
<span class="token function">sudo</span> systemctl start zerotier-one.service
zerotier-cli <span class="token function">join</span> <span class="token punctuation">{</span>YOUR_NETWORK_ID<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以搭建好一个虚拟内网了。</p><h3 id="建立ssh连接" tabindex="-1"><a class="header-anchor" href="#建立ssh连接" aria-hidden="true">#</a> 建立SSH连接</h3>`,5),h=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/ssh_config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要将<code>Port 22</code>前的#去掉，当然如果你愿意也可以直接修改Port后面的值。</p><p>保存后需要重启一下服务，执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> restart sshd.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但为了保证开机就能使用SSH，还需要执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token builtin class-name">enable</span> sshd.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后你就可以执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> USERNAME@IP
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来远程连接服务器了。</p><p>但这里要注意的是，如果前面你设定的port不是默认值22，则需要使用p参数，即执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-p</span> YOUR_PORT USERNAME@IP
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="关闭图形桌面" tabindex="-1"><a class="header-anchor" href="#关闭图形桌面" aria-hidden="true">#</a> 关闭图形桌面</h3><p>因为我不喜欢总是去插拔鼠标接收器来在两台电脑之间使用，而且服务器我也是只可能使用命令行形式，而最重要的原因是它打开的图形桌面Xorg服务是要占用显卡的，这个就阻挠了我进一步的安装驱动，于是我执行了如下指令来关掉这个多余的东西：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl set-default multi-user.target
<span class="token function">sudo</span> <span class="token function">reboot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样你就可以开机就进入命令行模式了，其实就是tty模式。</p><p>如果你有一天想用回这个桌面系统，那就执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl set-default graphics.target
<span class="token function">sudo</span> <span class="token function">reboot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装nvidia驱动" tabindex="-1"><a class="header-anchor" href="#安装nvidia驱动" aria-hidden="true">#</a> 安装Nvidia驱动</h3><p>依旧根据<code>inxi -G</code>给出的显卡信息到Nvidia官网选择合适的驱动程序下载过来，然后用<code>sudo bash NVIDIA…….sh</code>即可。</p><p>但要注意的是如果安装失败并报错提示缺少kernel的话，你需要根据系统内核版本来安装linux-headers，查看系统版本的方法有三个：一是执行<code>username -a</code>来查看内核版本；二是执行<code>neofetch</code>，不过这个需要提前安装好neofetch才行；三则是直接运行系统自带的<code>screenfetch</code>，因此本人最推荐这个方法，当然第一个方法非常简洁，也足够使用。如你所见，Kernel后跟的数字就意味着你要安装的linux-headers的版本，比如我的就是<code>5.11.22-2-MANJARO</code>，那我就要安装linux510-headers，为什么不是511，因为没有啊～安装好Kernel Headers之后再重新安装显卡，就万事大吉了。</p><h3 id="安装cuda系列" tabindex="-1"><a class="header-anchor" href="#安装cuda系列" aria-hidden="true">#</a> 安装cuda系列</h3><p>安装之前一定要检查一下你的系统驱动版本是否与你将要安装的cuda版本匹配，由于我这里的版本是470.63.01，对应应该装的CUDA版本要高于11.2（包括11.2）。而我这恰好一切都满足，就很顺利，执行一个语句即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> cuda cuda-tools cudnn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="结束" tabindex="-1"><a class="header-anchor" href="#结束" aria-hidden="true">#</a> 结束</h2><p>现在你的服务器已经搭好了，一切都可以正常使用咯～</p>`,25);function v(b,m){const s=l("RouterLink");return r(),t("div",null,[u,n("p",null,[e("由于这个系统有较长时间没有使用，因此需要像刚安装好系统那样做一切前期准备，详细步骤请阅读我之前的"),d(s,{to:"/Linux/Manjaro%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE.html"},{default:i(()=>[e("文章")]),_:1}),e("。")]),p,n("p",null,[e("做好上一步之后，可以根据情况自己设定好IP「更具体的内容请移步至"),d(s,{to:"/Linux/ZeroTier-One%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.html"},{default:i(()=>[e("这篇文章")]),_:1}),e("」，需要记好服务器的IP，并且编辑SSH配置文件：")]),h])}const g=c(o,[["render",v],["__file","记服务器搭建过程.html.vue"]]);export{g as default};
