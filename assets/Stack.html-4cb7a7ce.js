import{_ as i,W as u,X as r,$ as c,a2 as a,a1 as l,Y as n,Z as s,C as k}from"./framework-68a75bb9.js";const d={},m=l('<p>栈是只允许在一段进行插入或删除操作的线性表。</p><p>对于栈有以下三个概念：</p><ol><li>栈顶：线性表允许进行插入删除操作的一端。</li><li>栈底：固定的、不允许插入删除操作的一端。</li><li>空栈：不含任何元素的空表。</li></ol><p>栈的操作特性可以明显地概括为<strong>后进先出</strong>。</p><div class="hint-container tip"><p class="hint-container-title">考研中可直接使用的栈的基本操作</p><ol><li>InitStach(&amp;S): 初始化一个空栈</li><li>StackEmpty(S): 判断栈是否为空</li><li>Push(&amp;S, x): 入栈</li><li>Pop(&amp;S, &amp;x): 出栈</li><li>GetTop(S, &amp;x): 读栈顶元素</li><li>DestroyStack(&amp;S): 销毁栈</li></ol></div><h2 id="栈的数学性质" tabindex="-1"><a class="header-anchor" href="#栈的数学性质" aria-hidden="true">#</a> 栈的数学性质</h2>',6),v=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s("个不同元素入栈，出栈元素不同排列的个数为")],-1),b=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mn",null,"1"),n("mrow",null,[n("mi",null,"n"),n("mo",null,"+"),n("mn",null,"1")])]),n("msubsup",null,[n("mi",null,"C"),n("mrow",null,[n("mn",null,"2"),n("mi",null,"n")]),n("mi",null,"n")])]),n("annotation",{encoding:"application/x-tex"}," \\frac{1}{n+1}C_{2n}^{n} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.0908em","vertical-align":"-0.7693em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3214em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"1")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.7693em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.7144em"}},[n("span",{style:{top:"-2.453em","margin-left":"-0.0715em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2"),n("span",{class:"mord mathnormal mtight"},"n")])])]),n("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.247em"}},[n("span")])])])])])])])])])],-1),h=l(`<p>上述公式称为卡特兰数(Catalan)，这一点可以使用数学归纳法证明。</p><h2 id="栈的顺序存储结构" tabindex="-1"><a class="header-anchor" href="#栈的顺序存储结构" aria-hidden="true">#</a> 栈的顺序存储结构</h2><p>顾名思义，就是使用顺序线性表来实现栈的功能。</p><p>结构体定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token punctuation">{</span> MAX_SIZE <span class="token operator">=</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ElemType data<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span> SqStack<span class="token punctuation">,</span> <span class="token operator">*</span>PSqStack<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>SqStack.top</code>为栈顶指针，初始时设置<code>SqStack.top = -1</code>（也可设置为<code>SqStack.top = 0</code>），栈顶元素为<code>SqStack.data[SqStack.top]</code>。</p><p><code>SqStack.top</code>初始化为<code>-1</code>和<code>0</code>在操作上存在差别（但不大），以下基本操作中会分别讨论。</p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3>`,8),S=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"InitStack"),n("span",{class:"token punctuation"},"("),s("PSqStack S"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  S`),n("span",{class:"token operator"},"->"),s("top "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"InitStack"),n("span",{class:"token punctuation"},"("),s("PSqStack S"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  S`),n("span",{class:"token punctuation"},"."),s("top "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("h3",{id:"判断空栈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#判断空栈","aria-hidden":"true"},"#"),s(" 判断空栈")],-1),w=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"StackEmpty"),n("span",{class:"token punctuation"},"("),s("PSqStack S"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("S"),n("span",{class:"token operator"},"->"),s("top "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"StackEmpty"),n("span",{class:"token punctuation"},"("),s("PSqStack S"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("S"),n("span",{class:"token operator"},"->"),s("top "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("h3",{id:"入栈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#入栈","aria-hidden":"true"},"#"),s(" 入栈")],-1),_=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"Push"),n("span",{class:"token punctuation"},"("),s("PSqStack S"),n("span",{class:"token punctuation"},","),s(" ElemType x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("S"),n("span",{class:"token operator"},"->"),s("top "),n("span",{class:"token operator"},"=="),s(" MAX_SIZE"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
  S`),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"++"),s("S"),n("span",{class:"token operator"},"->"),s("top"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" x"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"Push"),n("span",{class:"token punctuation"},"("),s("PSqStack S"),n("span",{class:"token punctuation"},","),s(" ElemType x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("S"),n("span",{class:"token operator"},"->"),s("top "),n("span",{class:"token operator"},"=="),s(" MAX_SIZE"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
  S`),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),s("S"),n("span",{class:"token operator"},"->"),s("top"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" x"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("h3",{id:"出栈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#出栈","aria-hidden":"true"},"#"),s(" 出栈")],-1),A=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"Pop"),n("span",{class:"token punctuation"},"("),s("PSqStack S"),n("span",{class:"token punctuation"},","),s(" ElemType "),n("span",{class:"token operator"},"*"),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"StackEmpty"),n("span",{class:"token punctuation"},"("),s("S"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token operator"},"*"),s("x "),n("span",{class:"token operator"},"="),s(" S"),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),s("S"),n("span",{class:"token operator"},"->"),s("top"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"Pop"),n("span",{class:"token punctuation"},"("),s("PSqStack S"),n("span",{class:"token punctuation"},","),s(" ElemType "),n("span",{class:"token operator"},"*"),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"StackEmpty"),n("span",{class:"token punctuation"},"("),s("S"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token operator"},"*"),s("x "),n("span",{class:"token operator"},"="),s(" S"),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"--"),s("S"),n("span",{class:"token operator"},"->"),s("top"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=l(`<h3 id="读栈顶元素" tabindex="-1"><a class="header-anchor" href="#读栈顶元素" aria-hidden="true">#</a> 读栈顶元素</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">GetTop</span><span class="token punctuation">(</span>PSqStack S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>x <span class="token operator">=</span> S<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>S<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="顺序栈的特殊情形——共享栈" tabindex="-1"><a class="header-anchor" href="#顺序栈的特殊情形——共享栈" aria-hidden="true">#</a> 顺序栈的特殊情形——共享栈</h2><p>利用栈底位置不变的特性，可让两个顺序栈共享一个一维数组空间，将两个栈的栈底分别设置在共享空间的两端，两者的栈顶向共享空间的中间延伸。</p><p>使用共享栈是为了更有效地利用存储空间，两个栈的空间相互调节，只有在整个存储空间被占满时才发生上溢。</p><p>结构定义：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token punctuation">{</span> MAX_SIZE <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ElemType data<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> topA<span class="token punctuation">;</span>
    <span class="token keyword">int</span> topB<span class="token punctuation">;</span>
<span class="token punctuation">}</span> SStack<span class="token punctuation">,</span> <span class="token operator">*</span>PSStack<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1" aria-hidden="true">#</a> 初始化</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">InitSharedStack</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    S<span class="token operator">-&gt;</span>topA <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    S<span class="token operator">-&gt;</span>topB <span class="token operator">=</span> MAX_SIZE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断空栈-1" tabindex="-1"><a class="header-anchor" href="#判断空栈-1" aria-hidden="true">#</a> 判断空栈</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">StackAEmpty</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>topA <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">StackBEmpty</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>topB <span class="token operator">==</span> MAX_SIZE<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断满栈" tabindex="-1"><a class="header-anchor" href="#判断满栈" aria-hidden="true">#</a> 判断满栈</h3><p>实现思路：仅当两个栈的栈顶元素相邻时，这个共享栈的空间就被占满。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">isFullSharedStack</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>topB <span class="token operator">-</span> S<span class="token operator">-&gt;</span>topA <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="入栈-1" tabindex="-1"><a class="header-anchor" href="#入栈-1" aria-hidden="true">#</a> 入栈</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">PushA</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFullSharedStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    S<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">++</span>S<span class="token operator">-&gt;</span>topA<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">PushB</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFullSharedStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    S<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">--</span>S<span class="token operator">-&gt;</span>topB<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="出栈-1" tabindex="-1"><a class="header-anchor" href="#出栈-1" aria-hidden="true">#</a> 出栈</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">PopA</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackAEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>x <span class="token operator">=</span> S<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>S<span class="token operator">-&gt;</span>topA<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">PopB</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackBEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>x <span class="token operator">=</span> S<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>S<span class="token operator">-&gt;</span>topB<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读栈顶元素-1" tabindex="-1"><a class="header-anchor" href="#读栈顶元素-1" aria-hidden="true">#</a> 读栈顶元素</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ElemType <span class="token function">GetTopA</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackAEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>x <span class="token operator">=</span> S<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>S<span class="token operator">-&gt;</span>topA<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ElemType <span class="token function">GetTopB</span><span class="token punctuation">(</span>PSStack S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackBEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>x <span class="token operator">=</span> S<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>S<span class="token operator">-&gt;</span>topB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="栈的链式存储结构" tabindex="-1"><a class="header-anchor" href="#栈的链式存储结构" aria-hidden="true">#</a> 栈的链式存储结构</h2><p>采用链式存储的栈称为<strong>链栈</strong>。链栈的优点是便于多个栈共享存储空间并提高其效率，且不存在栈满上溢的情况。</p><p>链栈通常使用单链表实现，并且规定所有操作都是在单链表的表头进行的。这里规定链栈没有头结点，头指针直接指向栈顶元素。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkStackNode</span><span class="token punctuation">{</span>
  ElemType data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">LinkStackNode</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">*</span>LStack<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用链式存储，便于结点的插入与删除操作。插入操作与单链表的头插法相同；删除操作也与头插法类似。</p>`,25);function B(M,I){const o=k("CodeTabs");return u(),r("div",null,[m,v,b,h,c(o,{id:"89",data:[{title:"top = -1"},{title:"top = 0"}],"tab-id":"stack"},{tab0:a(({title:t,value:e,isActive:p})=>[S]),tab1:a(({title:t,value:e,isActive:p})=>[y]),_:1}),g,c(o,{id:"100",data:[{title:"top = -1"},{title:"top = 0"}],"tab-id":"stack"},{tab0:a(({title:t,value:e,isActive:p})=>[w]),tab1:a(({title:t,value:e,isActive:p})=>[x]),_:1}),f,c(o,{id:"111",data:[{title:"top = -1"},{title:"top = 0"}],"tab-id":"stack"},{tab0:a(({title:t,value:e,isActive:p})=>[_]),tab1:a(({title:t,value:e,isActive:p})=>[E]),_:1}),P,c(o,{id:"122",data:[{title:"top = -1"},{title:"top = 0"}],"tab-id":"stack"},{tab0:a(({title:t,value:e,isActive:p})=>[A]),tab1:a(({title:t,value:e,isActive:p})=>[T]),_:1}),q])}const X=i(d,[["render",B],["__file","Stack.html.vue"]]);export{X as default};
