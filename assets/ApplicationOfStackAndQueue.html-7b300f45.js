import{_ as s,W as r,X as t,$ as o,a2 as a,a1 as i,C as h,Y as e}from"./framework-68a75bb9.js";const p={},u=i(`<h2 id="栈在括号匹配中的应用" tabindex="-1"><a class="header-anchor" href="#栈在括号匹配中的应用" aria-hidden="true">#</a> 栈在括号匹配中的应用</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>观察这个序列：</p><p style="text-align:center;">[ ( [ ] [ ] ) ]<br>12345678</p><p>分析思路：</p><ol><li>计算机接受1号<code>[</code>后，期待与之匹配的<code>]</code>在8号位置出现</li><li>获得2号<code>(</code>后，此时<code>[</code>暂时搁置，而期待与之匹配的<code>)</code>在7号位置出现</li><li>获得3号<code>[</code>后，<code>(</code>也同样搁置，期待与之匹配的<code>]</code>在4号位置出现，这时3号得到满足，我们就进行一次消解，现在当前最急迫的任务回到<code>(</code>上。</li><li>……</li></ol><p>不难看出，以上思路与栈的思想相契合，因此我们使用栈来解决括号匹配的问题。</p></div><p><strong>问题</strong>：假设表达式中允许包含两种括号，为<code>()</code>和<code>[]</code>，请设计一个算法来检测字符串中的括号是否匹配。</p><h3 id="算法思想" tabindex="-1"><a class="header-anchor" href="#算法思想" aria-hidden="true">#</a> 算法思想</h3><ol><li>初始设置一个空栈，按照顺序读入括号。</li><li>若遇到右括号，则先读取栈顶元素，与该右括号进行匹配：若匹配，则进行一次出栈操作；否则返回<code>不匹配</code>的结果。</li><li>若遇到左括号，则进行一次入栈操作。</li><li>若遍历完字符串后栈为空则返回<code>匹配</code>结果，否则返回<code>不匹配</code>的结果。</li></ol><h3 id="算法实现" tabindex="-1"><a class="header-anchor" href="#算法实现" aria-hidden="true">#</a> 算法实现</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="栈在表达式求值中的应用" tabindex="-1"><a class="header-anchor" href="#栈在表达式求值中的应用" aria-hidden="true">#</a> 栈在表达式求值中的应用</h2><p>我们平日中使用中缀表达式来表达运算，但在计算机中如果直接使用则不仅要考虑运算符优先级，而且要处理括号，这样对求值会复杂很多。因此我们使用后缀表达式或者前缀表达式来代替中缀表达式，因为它们本身已经考虑了运算的优先级顺序，且没有括号，仅有操作数和运算符。</p><h3 id="中缀表达式转换为前-后缀表达式" tabindex="-1"><a class="header-anchor" href="#中缀表达式转换为前-后缀表达式" aria-hidden="true">#</a> 中缀表达式转换为前/后缀表达式</h3>`,10),v=e("p",null,"算法思想：",-1),_=e("p",null,"算法实现：",-1),b=e("div",{class:"language-c line-numbers-mode","data-ext":"c"},[e("pre",{class:"language-c"},[e("code",null,`
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),m=e("p",null,"算法思想：",-1),g=e("p",null,"算法实现：",-1),x=e("div",{class:"language-c line-numbers-mode","data-ext":"c"},[e("pre",{class:"language-c"},[e("code",null,`
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),f=i(`<h3 id="后缀表达式求值" tabindex="-1"><a class="header-anchor" href="#后缀表达式求值" aria-hidden="true">#</a> 后缀表达式求值</h3><p>算法思想：</p><ol><li>顺序扫描表达式的每一项，然后判断它的类型。</li><li>若判断为操作数，则将其压入栈中。</li><li>若判断为操作符，则从栈中弹出两个操作数形成运算指令，并将计算结果重新压入栈中。</li><li>当所有项都扫描并处理完成后，所得的就是表达式的计算结果。</li></ol><p>算法实现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="前缀表达式求值" tabindex="-1"><a class="header-anchor" href="#前缀表达式求值" aria-hidden="true">#</a> 前缀表达式求值</h3><p>算法思想：与后缀表达式求值的思路类似，但是要按照前缀表达式的计算顺序，因此也是从右向左遍历前缀表达式来求值。</p><p>算法实现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="栈在递归中的应用" tabindex="-1"><a class="header-anchor" href="#栈在递归中的应用" aria-hidden="true">#</a> 栈在递归中的应用</h2><p>将递归算法转化为非递归算法，就需要用到栈来实现。</p><h2 id="队列在层次遍历中的应用" tabindex="-1"><a class="header-anchor" href="#队列在层次遍历中的应用" aria-hidden="true">#</a> 队列在层次遍历中的应用</h2><p>在信息处理中有一大类问题需要逐层或逐行处理，这类问题的解决办法往往是在处理当前层或当前行时就对下一层或下一行进行预处理，吧处理顺序安排好，等到当前层或当前行处理完毕，就可以处理下一层或下一行。而我们使用队列是为了保存下一步的处理顺序。</p><p>以二叉树层次遍历为例，该过程的算法思路是：</p><ol><li>根节点入队</li><li>队列中第一个结点出队并访问，若其有左孩子则左孩子入队；若其有右孩子则将右孩子入队。</li><li>若队空（此时所有结点都已经处理完毕），则结束遍历，否则重复步骤2。</li></ol><h2 id="队列在计算机系统中的应用" tabindex="-1"><a class="header-anchor" href="#队列在计算机系统中的应用" aria-hidden="true">#</a> 队列在计算机系统中的应用</h2><p>队列在计算机系统中应用十分广泛，以下面两个方面为例来简述队列在其中的作用：</p><ol><li><p>解决主机与外部设备之间速度不匹配的问题</p><p>以主机与打印机之间速度不匹配的问题为例：主机输出的速度远比打印机打印速度快得多，如果直接将输出数据送给打印机打印就必然会造成数据部分丢失，为了避免这种问题，就需要设计一个打印数据缓冲区，主机将输出数据写入这个缓冲区，写满之后暂停输出转去做其他事情，而打印机从缓冲区中按照先进先出的原则读取数据并打印，打印完成之后再向主机发出请求，主机受到请求后再向缓冲区写入接下来的打印数据。</p><p>这样做既保证了打印数据的正确性，又提高了主机的效率。而上述过程中所使用的缓冲区实质上就是一个队列。</p></li><li><p>解决由多用户引起的资源竞争问题</p><p>以CPU资源竞争为例，在一台带有多终端的计算机系统上，有多个用户需要CPU各自运行自己的程序，他们分别通过各自的终端向操作系统提出占用CPU的请求。操作系统通常按照每个请求在时间上的先后顺序（也可以是以某种标准排列的顺序）把它们排成一个队列，每次把CPU分配给队首请求的用户使用。当相应程序运行结束或者用完规定的时间间隔后令其出队（程序未执行完的情况下会再次发送请求），再把CPU分配给新的队首请求的用户使用。</p><p>这样技能满足每个用户的请求，又使CPU能够正常运行。</p></li></ol>`,18);function C(A,P){const d=h("Tabs");return r(),t("div",null,[u,o(d,{id:"78",data:[{title:"前缀表达式"},{title:"后缀表达式"}]},{tab0:a(({title:l,value:c,isActive:n})=>[v,_,b]),tab1:a(({title:l,value:c,isActive:n})=>[m,g,x]),_:1}),f])}const k=s(p,[["render",C],["__file","ApplicationOfStackAndQueue.html.vue"]]);export{k as default};
