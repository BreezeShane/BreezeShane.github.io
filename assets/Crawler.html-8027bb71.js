import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a0 as i,a1 as e,C as l}from"./framework-68a75bb9.js";const u={},r={class:"hint-container details"},d=n("summary",null,"参考资料",-1),k={href:"https://mofanpy.com/tutorials/data-manipulation/scraping/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.zhihu.com/question/60280580",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.osgeo.cn/scrapy/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/scrapy/dirbot",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/HuaCode/article/details/79429383",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.jb51.net/article/209743.htm",target:"_blank",rel:"noopener noreferrer"},y={href:"https://juejin.cn/post/6844904041290399751",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/u014041590/article/details/85109026",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/Python_sn/article/details/108827436",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.cnblogs.com/zhanghongfeng/p/7881810.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://blog.csdn.net/qq_40795214/article/details/82154464",target:"_blank",rel:"noopener noreferrer"},S={href:"https://codeantenna.com/a/JlowUk9g7J",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.csdn.net/yangchuan0120/article/details/109843009",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leimao.github.io/blog/Python-AsyncIO-Awaitable-Coroutine-Future-Task/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.dounaite.com/article/625c7b29ae87fd3f79680cee.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://icode.best/i/35828746609683",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.ruanyifeng.com/blog/2014/10/event-loop.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://homholueng.github.io/2019/10/08/fluent-python-asyncio/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://bbs.huaweicloud.com/blogs/109055",target:"_blank",rel:"noopener noreferrer"},I={href:"https://huoyingwhw.com/pythonGuide/python%E8%BF%9B%E9%98%B6/asyncio3/",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),F={href:"https://mofanpy.com/tutorials/data-manipulation/scraping/",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"在学过网络爬虫这一版块的内容之后，我发现网络爬虫本就没有那么神秘，说到底，不过是进入某一网络站点获取源码，再利用其他技术来爬取我们需要的信息。而且，我发现，到目前这个学习阶段为止，网络爬虫只是一种具备针对性的工具，也就是说当你需要获取某种数据时，你要做的工作首先就是要在目标网络站点上“踩点”——剖析目标网站的结构，并在其中找出你希望找到的目标。然后从此设计你的爬虫程序。",-1),D=n("p",null,"写爬虫工具常用的包有requests、beautifulsoup4、Asyncio、Aiohttp和Selenium等，皆可通过pip3安装。另外有看见关于Scrapy爬虫库的介绍，目前还没有学。",-1),G=n("h2",{id:"beautifulsoup",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#beautifulsoup","aria-hidden":"true"},"#"),s(" BeautifulSoup")],-1),M={href:"https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/",target:"_blank",rel:"noopener noreferrer"},V=e(`<p>使用之前要先安装，执行<code>pip install beautifulsoup4 lxml html5lib</code>来完成安装「其中最后两个是解析器，可以选择不安装」。</p><p>使用BeautifulSoup时需要提前引用相关的包，并且获取目标网站的网页：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup <span class="token keyword">as</span> bs
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen

web_page <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">&quot;https://breezeshane.github.io/index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
soup <span class="token operator">=</span> bs<span class="token punctuation">(</span>web_page<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而且对Python友好的是，我们获取来的一切标签，皆可按照Python字典的操作方式操作标签。「而这一点官方文档也再三强调。」</p><p>若希望查找所有某名字的标签时，可以使用find_all方法查找，使用样例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>href <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
links <span class="token operator">=</span> <span class="token punctuation">[</span>link<span class="token punctuation">[</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> link <span class="token keyword">in</span> href<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的href就可以获取一切标签<code>&lt;a&gt;</code>，而如果只是希望获取其中的链接，则可使用第二行代码来生成只含有链接的列表。</p><p>另外，值得注意的是，find_all方法支持正则表达式，但需要引用re包，在第一行插入<code>import re</code>。Example：<code>href = soup.find_all(re.compile(&quot;^li&quot;))</code>，这表示寻找以“li”开头的所有标签，而如果希望寻找包含“li”的标签，则需写成：<code>href = soup.find_all(re.compile(&quot;li&quot;))</code></p><p>同时，find_all方法还支持一次性获取多个类型标签，只消用逗号隔开即可。Example：<code>href = soup.find_all([&quot;link&quot;, &quot;script&quot;])</code></p><p>如果想查找指定属性以及其对应的值的话，可以使用<code>soup.find_all(&#39;link&#39;, {&quot;mode&quot; : &quot;dark&quot;})</code>，这表示寻找包含<code>mode=&quot;dark&quot;</code>的link标签。</p><p>还有一个比较有用的标签属性——has_attr属性，可以判断该标签是否含有指定属性，是则返回True，否则为False。</p><p>更多具体细节可以直接查询官方文档，本文就不作赘述。</p><h2 id="requests" tabindex="-1"><a class="header-anchor" href="#requests" aria-hidden="true">#</a> Requests</h2>`,13),N={href:"https://cn.python-requests.org/zh_CN/latest/",target:"_blank",rel:"noopener noreferrer"},z=e(`<p>传递URL参数时，可以写如下代码「此处以模拟Bing搜索为例」：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.bing.com/search&#39;</span><span class="token punctuation">,</span> params<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;BreezeShane&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他功能相对来说较为复杂并且信息量也挺大，但很完善，因此要经常翻看官方文档，写爬虫时如果有什么需求再来查就好了。</p><h2 id="asyncio-在学了在学了-tot" tabindex="-1"><a class="header-anchor" href="#asyncio-在学了在学了-tot" aria-hidden="true">#</a> Asyncio（在学了在学了(ToT)）</h2>`,4),J={href:"https://docs.python.org/zh-cn/3/library/asyncio.html",target:"_blank",rel:"noopener noreferrer"},L=e(`<p>Asyncio是异步加载库，虽说是单线程，但在较多场合情况下优胜于多线程，而我们如果需要爬取大量数据的话，异步加载还是有必要学的。从官方文档中我们也发现，学到这就已经接触了Python并发编程技术。</p><p>官方给出了一个程序示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello ...&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;... World!&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Python 3.7+</span>
asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的Asyncio Example并不难理解，async表示后面定义的函数是异步加载的模块，await一行表示执行该函数时暂停等待1秒。实际上这个就基本给出了Asyncio的使用模板。如果你希望实现什么功能，自行添加自己的代码即可，就像Movant写的程序：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment"># async 形式的功能</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Start job &#39;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>t<span class="token punctuation">)</span>          <span class="token comment"># 等待 &quot;t&quot; 秒, 期间切换其他任务</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Job &#39;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">&#39; takes &#39;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">&#39; s&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>                       <span class="token comment"># async 形式的功能</span>
    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>
        loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>job<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>                                       <span class="token comment"># 创建任务, 但是不执行</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>               <span class="token comment"># 执行并等待所有任务完成</span>

t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment"># 建立 loop</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 执行 loop</span>
loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment"># 关闭 loop</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Async total time : &quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写的程序蛮简单，但Asyncio实际上远不止如此。</p><p>更多的用法可以直接去阅读文档，本人精力有限，而且意图也不在于深入精通网络爬虫，只是希望满足自己的需求而已，就不会在此继续讨论Asyncio了。如果过后遇到了什么问题，解决之后还是会回来记录一下。</p><h2 id="使用scrapy来实战" tabindex="-1"><a class="header-anchor" href="#使用scrapy来实战" aria-hidden="true">#</a> 使用Scrapy来实战</h2><p>爬虫的流行框架很多，比如Scrapy、Crawley、Portia、newspaper、Python-goose、Aiohttp、Asks、Vibora、Pyppeteer、Requestium、Arsenic、Grab、Botflow、Ruia等等，难免让人眼花缭乱，但应该注意到，各框架之间是大同小异的，区别也在于基于什么技术上实现的，因此如有特别需求才需要细细甄别，一般直接无脑选择第一个就够用。如你所见，我使用了Scrapy框架，因为我没有特殊需要。</p><p>因为本人是一名刀客塔狂热分子，特别喜欢Arknights里的游戏音乐，然后凭借自己的搜索能力淘到了两个宝藏网站：</p>`,10),O={href:"https://prts.wiki/w/%E9%9F%B3%E4%B9%90%E9%89%B4%E8%B5%8F",target:"_blank",rel:"noopener noreferrer"},H={href:"https://arknightsost.nbh.workers.dev/",target:"_blank",rel:"noopener noreferrer"},U=e(`<blockquote><p><s>虽然的确可以自己解包提取，但别人做好的成果我为什么不能拿来白嫖呢？</s></p></blockquote><h3 id="prts-wiki" tabindex="-1"><a class="header-anchor" href="#prts-wiki" aria-hidden="true">#</a> PRTS Wiki</h3><p>如你所见，这两个网站资源真的丰富，我先拿第一个网站实验~~（开刀）~~，但是这里想全要的话是要自己一个一个点开下载，总共286首也太难办了点……于是我决定使用爬虫来替我完成批量下载的操作。</p><p>爬虫，结合之前所学，本质上是按照网站设计方式针对性制定的爬取资源模式。于是在开工之前，我首先进行网站的结构解析工作，发现该网站的目标资源分布规律十分明显：资源都分布在table标签下的tbody内，而且每个tbody标签内的前两个tr都是对应表标题和子标题，剩下tr部分都是资源文件所在的表格，而且这部分的tr标签内每一个都有两个td标签，第一个用来显示资源名称，另一个则是目标了，令人愉快的是，这个网站没做什么资源加密与隐藏的事，而是直接暴露在audio标签中的source标签内，并且亲自确认有效链接就是其src属性中的链接。</p><p>基于这一分析结果，我确定好自己的需要：<strong>按照table的标题创建对应的文件夹，然后在其中存放下载的音频文件，且以其对应的名字命名</strong>，于是就开始针对性地写爬虫脚本了。</p><p>首先创建爬虫项目，在命令行中执行<code>scrapy crawl ArknightsBGMCrawler</code>，这样就会在当前位置创建一个名为<code>ArknightsBGMCrawler</code>的包，其结构为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ArknightsBGMCrawler
├── __init__.py
├── items.py
├── middlewares.py
├── pipelines.py
├── settings.py
├── spiders
│   └── __init__.py
└── utils.py

<span class="token number">1</span> directory, <span class="token number">7</span> files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而现在我们要做的第一件事就是创建Item Model，定义每一个对象的属性结构，<code>items.py</code>文件内代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> scrapy


<span class="token keyword">class</span> <span class="token class-name">ArknightsbgmcrawlerItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># define the fields for your item here like:</span>
    folder_name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
    item_name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果你感觉这非常眼熟的话，那很正常，因为Scrapy框架其实也是基于ORM技术的。</p></blockquote><p>然后我们要做的就是创建对应的Crawler Model，于是我们在其中的spider文件夹下创建新的文件<code>PRTSCrawler.py</code>，在其中写入Crawler类对象的定义，对应的代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> scrapy
<span class="token keyword">from</span> ArknightsBGMCrawler<span class="token punctuation">.</span>items <span class="token keyword">import</span> ArknightsbgmcrawlerItem
<span class="token keyword">from</span> ArknightsBGMCrawler<span class="token punctuation">.</span>utils <span class="token keyword">import</span> <span class="token operator">*</span>


<span class="token keyword">class</span> <span class="token class-name">PRTSSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&quot;PRTS&quot;</span>
    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;prts.wiki&quot;</span><span class="token punctuation">]</span>
    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;https://prts.wiki/w/%E9%9F%B3%E4%B9%90%E9%89%B4%E8%B5%8F&#39;</span>
    <span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
        node_sources <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;.wikitable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> node <span class="token keyword">in</span> node_sources<span class="token punctuation">:</span>
            folder_name_from_span <span class="token operator">=</span> node<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;tbody &gt; tr:first-child big&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
            folder_name_from_img <span class="token operator">=</span> node<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;tbody &gt; tr:first-child &gt; th &gt; img::attr(alt)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
            songs <span class="token operator">=</span> node<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;tbody &gt; tr:nth-child(n+3)&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> song <span class="token keyword">in</span> songs<span class="token punctuation">:</span>
                item <span class="token operator">=</span> ArknightsbgmcrawlerItem<span class="token punctuation">(</span><span class="token punctuation">)</span>

                item<span class="token punctuation">[</span><span class="token string">&#39;folder_name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> clean_folder_name<span class="token punctuation">(</span>folder_name_from_img<span class="token punctuation">)</span> \\
                    <span class="token keyword">if</span> folder_name_from_span <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> remove_tags<span class="token punctuation">(</span>folder_name_from_span<span class="token punctuation">)</span>

                song_name <span class="token operator">=</span> song<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;td:nth-last-child(2)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
                song_url <span class="token operator">=</span> song<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;td:last-child &gt; audio &gt; source::attr(src)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
                item<span class="token punctuation">[</span><span class="token string">&#39;item_name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> clean_song_name<span class="token punctuation">(</span>remove_tags<span class="token punctuation">(</span>song_name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                item<span class="token punctuation">[</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> song_url

                items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> items
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类内name变量决定后面你在运行时要写的名字；allowed_domains变量决定爬取资源的可接受域，设置这个的目的在于避免爬取其他域的资源，避免意外的访问；start_urls变量决定爬取目标的链接。</p><p>继承Crawler类时要重写parse方法，参数为response，代表着对应爬取资源的对象。根据我之前提到的资源分布规律，我首先选择所有对应的目标所在的table，然后去掉最后一个项（原因是最后一个是外服的BGM，只有两个有对应资源，其它都要去另外的链接找，在这里自动化处理会非常麻烦，再加上这里面可直接获取的歌曲只有两个，就懒得折腾了，过后自己再手动下载就行了）。folder_name_from_span变量获取的是每一个分类对应的表格标题，folder_name_from_img变量获取的是每一个分类对应的图片标题，这样做的原因在于网站中的每个分类并不都有表格标题，有的是只有图片，有的是只有标题，但还好图片有对应的标题，于是在<code>item[&#39;folder_name&#39;] = clean_folder_name(folder_name_from_img) if folder_name_from_span is None else remove_tags(folder_name_from_span)</code>这里做了一个合并处理，成功做到每个分类都有对应的合适名字。songs变量则是获取每个分类下的所有可下载的歌曲所在的tr，最后遍历songs列表，给每一个song创建一个对象，并且给对象的folder_name、item_name、url属性赋值（这些属性的名字就取决于之前在<code>items.py</code>内的定义），至此parse方法就重写完成了。</p><p>链接获取到了，那接下来我们要做的就是下载了。据资料，我可以使用FilesPipeline来定义下载行为，除了要重写parse方法之外，还要在<code>pipelines.py</code>中定义FilesPipeline的继承类，重写file_path方法，return预期的文件名及路径即可。</p><p>但作为一个<s>勇敢</s>智障的技术宅，我突然脑子一拍，想用异步算法来完成批量下载，于是就开始鲁莽起来了。我先执行<code>scrapy crawl PRTS -o data.json</code>把爬取结果导出到data.json中，再由<code>Downloader.py</code>读取文件并批量下载，于是我在<code>Downloader.py</code>中写了如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> json
<span class="token keyword">import</span> aiohttp
<span class="token keyword">import</span> asyncio
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> event_loop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span>connector<span class="token operator">=</span>aiohttp<span class="token punctuation">.</span>TCPConnector<span class="token punctuation">(</span>limit<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>
            event_loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>
                <span class="token keyword">await</span> job<span class="token punctuation">(</span>
                    session<span class="token operator">=</span>session<span class="token punctuation">,</span>
                    save_dir<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>SAVE_DIR<span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">&#39;folder_name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    name<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">&#39;item_name&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;.mp3&quot;</span><span class="token punctuation">,</span>
                    url<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">]</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data
        <span class="token punctuation">]</span>
        finished<span class="token punctuation">,</span> unfinished <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>
        all_results <span class="token operator">=</span> <span class="token punctuation">[</span>r<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> finished<span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;文件全部下载完毕: \\n&quot;</span><span class="token punctuation">,</span> all_results<span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> save_dir<span class="token punctuation">,</span> name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>save_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>save_dir<span class="token punctuation">)</span>
    save_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>save_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        file_code <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> save_file<span class="token punctuation">:</span>
            save_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>file_code<span class="token punctuation">)</span>
            pbar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> raise_message<span class="token punctuation">(</span>url<span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">raise_message</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    SAVE_DIR <span class="token operator">=</span> <span class="token string">&#39;./ArknightsBGMs/&#39;</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>SAVE_DIR<span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>SAVE_DIR<span class="token punctuation">)</span>

    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;data.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        data_json <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
        <span class="token comment"># formatted_data_json = json.dumps(data_json, indent=4)</span>
        <span class="token comment"># print(formatted_data_json)</span>
        pbar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>data_json<span class="token punctuation">)</span><span class="token punctuation">,</span> desc<span class="token operator">=</span><span class="token string">&quot;Downloading&quot;</span><span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> unit_scale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> colour<span class="token operator">=</span><span class="token string">&#39;green&#39;</span><span class="token punctuation">)</span>
        asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>start<span class="token punctuation">(</span>data_json<span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合我之前所学的异步知识，我首先创建好存放目录并创建一个循环事件队列，接着从前面爬取的json文件中读取出来下载连接，为了便于用户与计算机之间的交互，我另外创建了进度条对象。这之后我定义好事务并命名为job，通过async关键字修饰使其可挂起。在确保目录存在且文件未下载过的前提下，我将读取到的文件二进制流写入到预设好的文件中，在下载完成后更新进度条。</p><p>接下来我定义了start函数，在其中先创建连接池，并且创建事务队列，里面的元素通过create_task方法来创建事务，最后通过asyncio.wait将队列内各元素封装成Task对象，此后就是由该协程返回生成器对象（其他情况下可能也会是协程），最后由asyncio.run来驱动循环事务队列来进行。</p><h3 id="gdindex" tabindex="-1"><a class="header-anchor" href="#gdindex" aria-hidden="true">#</a> GDIndex</h3><p><em>这个网站的执行策略有些不一样，先留个坑，以后或许会填，或许会删掉（。。。）</em></p>`,21);function W(X,Y){const a=l("ExternalLinkIcon");return o(),c("div",null,[n("details",r,[d,n("ol",null,[n("li",null,[n("a",k,[s("莫烦 Python 爬虫基础教程"),t(a)])]),n("li",null,[n("a",m,[s("Python有哪些常见的、好用的爬虫框架？ - 知乎"),t(a)])]),n("li",null,[n("a",v,[s("Scrapy 2.5 documentation¶"),t(a)])]),n("li",null,[n("a",b,[s("Scrapy Documentation Demo"),t(a)])]),n("li",null,[n("a",h,[s("Unknown command: crawl（爬虫框架Scrapy遇到的常见错误）"),t(a)])]),n("li",null,[n("a",_,[s("Python爬虫之教你利用Scrapy爬取图片"),t(a)])]),n("li",null,[n("a",y,[s("小白学 Python 爬虫（35）：爬虫框架 Scrapy 入门基础（三） Selector 选择器"),t(a)])]),n("li",null,[n("a",g,[s("Python爬虫（三）：scrapy提取数据之CSS提取器"),t(a)])]),n("li",null,[n("a",f,[s("Python网络爬虫数据提取神器 Selector 的用法"),t(a)])]),n("li",null,[n("a",w,[s("python网络爬虫之使用scrapy下载文件 - 一张红枫叶"),t(a)])]),n("li",null,[n("a",q,[s("Scrapy爬虫之中文乱码问题"),t(a)])]),n("li",null,[n("a",S,[s("python下载文件进度条_python超好用爬虫下载进度条模块"),t(a)])]),n("li",null,[n("a",x,[s("Python使用aiohttp和asyncio多线程下载文件"),t(a)])]),n("li",null,[n("a",A,[s("Python AsyncIO Awaitables: Coroutine, Future, and Task"),t(a)])]),n("li",null,[n("a",B,[s("通过一个例子分析python3异步编程过程"),t(a)])]),n("li",null,[n("a",P,[s("【Hard Python】【第二章-异步IO】2、异步任务在事件循环中的执行-爱代码爱编程"),t(a)])]),n("li",null,[n("a",j,[s("JavaScript 运行机制详解：再谈Event Loop"),t(a)])]),n("li",null,[n("a",C,[s("Chapter 18 - 使用 asyncio 包处理并发"),t(a)])]),n("li",null,[n("a",E,[s("一份详细的asyncio入门教程"),t(a)])]),n("li",null,[n("a",I,[s("Python进阶-面向对象-网编并发 » 13 asyncio并发编程进阶"),t(a)])])])]),R,n("p",null,[s("入门学习网络爬虫的阶段主要参考的是"),n("a",F,[s("莫烦 Python"),t(a)]),s("的爬虫基础教程，按照了他的学习路线去学，因为这个教程实在是非常通俗易懂，能让你迅速掌握网络爬虫的相关基础概念。")]),T,D,G,n("blockquote",null,[n("p",null,[s("此处参考的是"),n("a",M,[s("BeautifulSoup4 官方文档"),t(a)])])]),V,n("blockquote",null,[n("p",null,[s("此处参考"),n("a",N,[s("Requests 官方文档"),t(a)])])]),z,n("blockquote",null,[n("p",null,[s("此处参考"),n("a",J,[s("Asyncio 官方文档"),t(a)])])]),L,n("ol",null,[n("li",null,[n("a",O,[s("音乐鉴赏"),t(a)])]),n("li",null,[n("a",H,[s("GDIndex"),t(a)])])]),U,i('\n```javascript\ndocument.querySelectorAll(".v-btn--round").forEach(function(item){console.log(item.href)})\n```\n')])}const $=p(u,[["render",W],["__file","Crawler.html.vue"]]);export{$ as default};
